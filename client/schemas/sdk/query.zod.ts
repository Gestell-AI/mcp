// Generated by ts-to-zod
import { z } from 'zod'

/**
 * Fast search defaults: minimal depth for speed.
 */
const SearchFast: z.infer<typeof searchDefaultsSchema> = {
  type: 'phrase',
  vectorDepth: 10,
  nodeDepth: 1,
  maxQueries: 1,
  maxResults: 10
}

/**
 * Normal search defaults: balanced speed and coverage.
 */
const SearchNormal: z.infer<typeof searchDefaultsSchema> = {
  type: 'summary',
  vectorDepth: 8,
  nodeDepth: 2,
  maxQueries: 3,
  maxResults: 10
}

/**
 * Precise search defaults: deeper exploration for accuracy.
 */
const SearchPrecise: z.infer<typeof searchDefaultsSchema> = {
  type: 'summary',
  vectorDepth: 10,
  nodeDepth: 5,
  maxQueries: 3,
  maxResults: 10
}

/**
 * Mapping of search methods to their default parameter sets.
 */
export const SearchModes = {
  fast: SearchFast,
  normal: SearchNormal,
  precise: SearchPrecise
}

/**
 * Modes for formulating search queries.
 */
export const searchTypeSchema = z.union([
  z
    .literal('summary')
    .describe('Compare and analyze documents from their summaries'),
  z
    .literal('phrase')
    .describe(
      'Compare and analyze documents from a one sentence phrase (RECOMMENDED)'
    ),
  z
    .literal('keywords')
    .describe('Compare and analyze documents from their keywords')
])

/**
 * Performance vs. accuracy trade-offs for search execution.
 */
export const searchMethodSchema = z.union([
  z.literal('fast').describe('Prioritizes speed over depth.'),
  z
    .literal('normal')
    .describe('Balanced search depth and performance (RECOMMENDED)'),
  z.literal('precise').describe('Full-depth search for maximum accuracy.')
])

/**
 * Payload for executing a search against a collection.
 */
export const searchRequestBodySchema = z.object({
  collectionId: z.string().describe('Identifier of the target collection.'),
  categoryId: z
    .string()
    .optional()
    .describe('Optional category filter within the collection.'),
  prompt: z.string().describe('Natural-language query or prompt.'),
  method: searchMethodSchema
    .optional()
    .describe('Desired search performance/accuracy mode.'),
  type: searchTypeSchema
    .optional()
    .describe('Desired output format of the search.'),
  vectorDepth: z
    .number()
    .optional()
    .describe('Number of vector hops to explore.'),
  nodeDepth: z.number().optional().describe('Number of node hops to explore.'),
  maxQueries: z
    .number()
    .optional()
    .describe('Maximum number of sub-queries to issue.'),
  maxResults: z
    .number()
    .optional()
    .describe('Maximum number of results to return.'),
  includeContent: z
    .boolean()
    .optional()
    .describe('Include full content in each result.'),
  includeEdges: z
    .boolean()
    .optional()
    .describe('Include edge references in each result.'),
  edgesInResult: z
    .boolean()
    .optional()
    .describe('Embed edge data within result objects.')
})

/**
 * Single message in a prompt-driven interaction.
 */
export const promptMessageSchema = z.object({
  role: z
    .union([z.literal('user'), z.literal('model'), z.literal('system')])
    .describe('Origin of the message.'),
  content: z.string().describe('Textual content of the message.')
})

/**
 * Payload for prompt-based operations, extending core search options.
 */
export const promptRequestBodySchema = searchRequestBodySchema
  .omit({ includeContent: true, includeEdges: true, edgesInResult: true })
  .extend({
    template: z
      .string()
      .optional()
      .describe('Optional prompt instructions for the model.'),
    cot: z
      .boolean()
      .optional()
      .describe('Enable chain-of-thought reasoning (RECOMMENDED)'),
    messages: z
      .array(promptMessageSchema)
      .optional()
      .describe('Chat history and context in order (oldest to newest).')
  })

/**
 * Default parameter set for a search mode.
 */
export const searchDefaultsSchema = z.object({
  type: searchTypeSchema.describe('Default search output format.'),
  vectorDepth: z.number().describe('Default vector exploration depth.'),
  nodeDepth: z.number().describe('Default node exploration depth.'),
  maxQueries: z.number().describe('Default maximum sub-queries.'),
  maxResults: z.number().describe('Default maximum results returned.')
})

/**
 * Single entry in the search results array.
 */
export const searchResultSchema = z.object({
  content: z.string().describe('Extracted or generated content snippet.'),
  citation: z
    .string()
    .describe('Source or citation reference for the content.'),
  reason: z.string().describe('Explanation of why the result was chosen.')
})
