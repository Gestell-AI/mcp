// Generated by ts-to-zod
import { z } from 'zod'

/**
 * Available subscription tiers for an organization.
 */
export const organizationPlanSchema = z.union([
  z.literal('preview').describe('Evaluation tier with limited features.'),
  z
    .literal('developer')
    .describe('Individual developer tier for testing or hobby projects.'),
  z
    .literal('starter')
    .describe('Entry-level tier for small teams or startups.'),
  z
    .literal('scale')
    .describe('Scaled tier for growing teams with increased usage.'),
  z
    .literal('enterprise')
    .describe('Enterprise-grade tier with custom SLAs and support.')
])

/**
 * Roles that a user can hold within an organization.
 */
export const membershipRoleSchema = z.union([
  z.literal('member').describe('Standard member with read/write access.'),
  z.literal('admin').describe('Administrator with full management permissions.')
])

/**
 * Result object for `organization.list()`, representing summary data.
 */
export const organizationListResultSchema = z.object({
  id: z.string().describe('Organization unique identifier.'),
  name: z.string().describe('Display name of the organization.'),
  description: z.string().describe('Brief description of the organization.'),
  plan: organizationPlanSchema.describe('Active subscription plan.'),
  status: z
    .string()
    .describe('Operational status (e.g., "active", "suspended").'),
  dateCreated: z.date().describe('Creation timestamp.'),
  dateUpdated: z.date().describe('Last update timestamp.'),
  members: z
    .array(
      z.object({
        id: z.string().describe('Membership record identifier.'),
        accountId: z.string().describe('Associated account identifier.'),
        role: membershipRoleSchema.describe('Role assigned to the member.'),
        organization: z
          .object({
            id: z.string(),
            name: z.string(),
            description: z.string(),
            plan: organizationPlanSchema
          })
          .describe('Snapshot of the parent organization details.'),
        account: z
          .object({
            id: z.string(),
            email: z.string(),
            verified: z.boolean(),
            dateCreated: z.date(),
            dateUpdated: z.date()
          })
          .describe('Account metadata for the member.'),
        dateCreated: z.date().describe('Membership creation timestamp.'),
        dateUpdated: z.date().describe('Membership update timestamp.')
      })
    )
    .optional()
    .describe('Optional list of membership records for the organization.')
})

/**
 * Detailed result object for `organization.get()`, including relations.
 */
export const organizationResultSchema = z.object({
  id: z.string().describe('Organization unique identifier.'),
  name: z.string().describe('Display name of the organization.'),
  description: z.string().describe('Brief description of the organization.'),
  plan: organizationPlanSchema.describe('Active subscription plan.'),
  status: z
    .string()
    .describe('Operational status (e.g., "active", "suspended").'),
  dateCreated: z.date().describe('Creation timestamp.'),
  dateUpdated: z.date().describe('Last update timestamp.'),
  members: z
    .array(
      z.object({
        organization: z
          .object({
            id: z.string(),
            name: z.string(),
            description: z.string(),
            plan: organizationPlanSchema
          })
          .describe('Parent organization snapshot.'),
        id: z.string().describe('Membership record identifier.'),
        dateCreated: z.date().describe('Membership creation timestamp.'),
        dateUpdated: z.date().describe('Membership update timestamp.'),
        accountId: z.string().describe('Associated account identifier.'),
        role: membershipRoleSchema.describe('Role assigned to the member.'),
        account: z
          .object({
            id: z.string(),
            name: z.string(),
            email: z.string()
          })
          .describe('Core account details for the member.')
      })
    )
    .describe('Full list of membership records with account info.'),
  collections: z
    .array(
      z.object({
        id: z.string().describe('Collection unique identifier.'),
        name: z.string().describe('Collection name.'),
        dateCreated: z.date().describe('Creation timestamp.'),
        dateUpdated: z.date().describe('Last update timestamp.')
      })
    )
    .describe('Collections owned by the organization.')
})

/**
 * Payload for inviting or updating a member in an organization.
 */
export const organizationMemberRequestSchema = z.object({
  id: z.string().describe('UUID of the user or email address for invitation.'),
  role: membershipRoleSchema.describe('Role to assign: "admin" or "member".')
})
