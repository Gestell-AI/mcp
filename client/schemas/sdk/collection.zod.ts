// Generated by ts-to-zod
import { z } from 'zod'
import { documentSchema } from './document.zod'
import { organizationListResultSchema } from './organization.zod'

export const collectionTypeSchema = z.union([
  z.literal('frame'),
  z.literal('searchable-frame'),
  z.literal('canon'),
  z.literal('features')
])

export const piiTypeSchema = z.union([
  z.literal('generic'),
  z.literal('legal'),
  z.literal('medical')
])

export const categoryTypeSchema = z.union([
  z.literal('content'),
  z.literal('concepts'),
  z.literal('features'),
  z.literal('table')
])

export const piiIdentifierOptionSchema = z.union([
  z.literal('Name'),
  z.literal('Geographic Data'),
  z.literal('Dates'),
  z.literal('Phone Number'),
  z.literal('Fax Number'),
  z.literal('Email Address'),
  z.literal('Social Security Number'),
  z.literal('Medical Record Number'),
  z.literal('Health Plan Beneficiary Number'),
  z.literal('Account Number'),
  z.literal('Certificate/License Number'),
  z.literal('Vehicle Identifier'),
  z.literal('Device Identifier'),
  z.literal('Web URL'),
  z.literal('IP Address'),
  z.literal('Biometric Identifier'),
  z.literal('Full-face Photograph'),
  z.literal('Unique Identifier Code')
])

export const categorySchema = z.object({
  id: z.string(),
  collectionId: z.string(),
  name: z.string(),
  type: categoryTypeSchema,
  instructions: z.string(),
  singleEntry: z.boolean(),
  dateCreated: z.date(),
  dateUpdated: z.date()
})

export const collectionStatsSchema = z.object({
  docs: z.number(),
  size: z.number(),
  nodes: z.number(),
  status: z.object({
    documents: z.number(),
    nodes: z.number(),
    edges: z.number(),
    vectors: z.number(),
    category: z.number()
  })
})

export const createCategoryPayloadSchema = z.object({
  name: z.string(),
  type: categoryTypeSchema,
  instructions: z.string(),
  singleEntry: z.boolean()
})

export const collectionSchema = z.object({
  id: z.string().describe('Unique identifier for the collection.'),
  organizationId: z.string().describe('Identifier of the parent organization.'),
  name: z.string().describe('Display name of the collection.'),
  type: collectionTypeSchema.describe('The type of the collection.'),
  description: z.string().describe("Description of the collection's purpose."),
  pii: z.boolean().describe('Whether this collection contains PII data.'),
  piiType: piiTypeSchema.describe(
    'Label indicating the type of PII in this collection.'
  ),
  piiControls: z
    .array(piiIdentifierOptionSchema)
    .describe('Array of control identifiers for PII handling UI.'),
  tags: z
    .array(z.string())
    .describe('Tags associated with this collection for filtering/search.'),
  instructions: z
    .string()
    .describe('General instructions for collection usage.'),
  graphInstructions: z
    .string()
    .describe('Instructions specific to graph-based operations.'),
  promptInstructions: z
    .string()
    .describe('Instructions for prompt-based interactions.'),
  searchInstructions: z
    .string()
    .describe('Instructions for search operations.'),
  organization: organizationListResultSchema
    .optional()
    .describe(
      'Optional organization details that appears in when retrieving by id or in extended lists'
    ),
  categories: z
    .array(categorySchema)
    .optional()
    .describe(
      'Optional list of categories in this collection that appears when retrieving by id or in extended lists'
    ),
  documents: z
    .array(documentSchema)
    .optional()
    .describe(
      'Optional list of documents within this collection that appears when retrieving by id or in extended lists'
    ),
  dateCreated: z
    .date()
    .or(z.string().transform((str) => new Date(str)))
    .describe('Timestamp when the collection was created.'),
  dateUpdated: z
    .date()
    .or(z.string().transform((str) => new Date(str)))
    .describe('Timestamp when the collection was last updated.')
})
