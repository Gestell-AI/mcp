// Generated by ts-to-zod
import { z } from 'zod'

/**
 * Supported parsing strategies for different document formats.
 */
export const layoutTypeSchema = z
  .union([
    z
      .literal('document')
      .describe('Standard paginated document (e.g., PDF, Word).'),
    z.literal('photo').describe('Single-image input (e.g., JPG, PNG).'),
    z
      .literal('audio')
      .describe('Audio file input for transcription or segmentation.'),
    z
      .literal('video')
      .describe('Video file input for frame and audio-layout processing.')
  ])
  .describe('Supported parsing strategies for different document formats.')

/**
 * [x, y, width, height] in pixels relative to the top-left corner of the page or image.
 */
export const layoutPositionSchema = z
  .tuple([z.number(), z.number(), z.number(), z.number()])
  .describe(
    '[x, y, width, height] in pixels relative to the top-left corner of the page or image.'
  )

/**
 * Base output for a parsed layout element.
 */
export const documentLayoutOutputSchema = z
  .object({
    position: layoutPositionSchema.describe('Bounding box of the element.'),
    type: z.union([
      z.literal('title'),
      z.literal('subtitle'),
      z.literal('list'),
      z.literal('text'),
      z.literal('table'),
      z.literal('image'),
      z.literal('csv'),
      z.string()
    ]).describe(`Element kind:
- \`title\`
- \`subtitle\`
- \`list\`
- \`text\`
- \`table\`
- \`image\`
- \`csv\`
- or any custom tag`),
    content: z.string().describe('Raw text or data content of the element.')
  })
  .describe('Base output for a parsed layout element.')

/**
 * Parsed layout element with ordering and pagination metadata.
 */
export const documentLayoutSchema = documentLayoutOutputSchema
  .extend({
    index: z
      .number()
      .describe('Zero-based index of this element in the document flow.'),
    page: z
      .number()
      .describe('One-based page number where this element appears.')
  })
  .describe('Parsed layout element with ordering and pagination metadata.')

/**
 * Parsed segment from an audio file.
 */
export const audioLayoutSchema = z
  .object({
    index: z.number().describe('Zero-based segment index.'),
    start: z.string().describe('Start time as ISO 8601 or `HH:MM:SS` format.'),
    end: z.string().describe('End time as ISO 8601 or `HH:MM:SS` format.'),
    narrator: z.string().describe('Speaker or narrator identifier.'),
    description: z
      .string()
      .describe('Description or non-verbal context for the segment.'),
    content: z
      .string()
      .describe('Transcribed text content of the audio segment.')
  })
  .describe('Parsed segment from an audio file.')

/**
 * Parsed region from a single image.
 */
export const photoLayoutSchema = z
  .object({
    position: layoutPositionSchema.describe('Bounding box of the region.'),
    description: z
      .string()
      .describe('Description of the visual content (objects or scene).'),
    type: z.string().describe('Optional detected type or label for the region.')
  })
  .describe('Parsed region from a single image.')

/**
 * Parsed segment from a video file.
 */
export const videoLayoutSchema = z
  .object({
    index: z.number().describe('Zero-based segment index.'),
    start: z.string().describe('Start time as ISO 8601 or `HH:MM:SS` format.'),
    end: z.string().describe('End time as ISO 8601 or `HH:MM:SS` format.'),
    audio: z.string().describe('Transcribed or extracted audio content.'),
    narration: z.string().describe('Narration or descriptive text.'),
    narrator: z.string().describe('Speaker or narrator identifier.'),
    objects: z
      .array(photoLayoutSchema)
      .describe('Visual regions detected within the video frame.')
  })
  .describe('Parsed segment from a video file.')

/**
 * Layout for discrete feature annotations (e.g., points, key values).
 */
export const featureLayoutSchema = z
  .object({
    position: z
      .array(z.number())
      .describe(
        'Array of coordinates or numerical values relevant to the feature.'
      ),
    label: z.string().describe('Label identifying the feature.'),
    description: z
      .string()
      .describe('Description or metadata about the feature.')
  })
  .describe(
    'Layout for discrete feature annotations (e.g., points, key values).'
  )
