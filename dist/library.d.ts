import * as zod from 'zod';
import { ZodTypeAny, z, ZodType, ZodObject, ZodLiteral, ZodRawShape, AnyZodObject, ZodTypeDef, ZodOptional } from 'zod';
import { Readable, Writable } from 'node:stream';

declare const RequestMetaSchema: z.ZodObject<{
    /**
     * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
     */
    progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    /**
     * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
     */
    progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    /**
     * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
     */
    progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
}, z.ZodTypeAny, "passthrough">>;
declare const RequestSchema: z.ZodObject<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, "strip", z.ZodTypeAny, {
    method: string;
    params?: z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: string;
    params?: z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>;
declare const NotificationSchema: z.ZodObject<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, "strip", z.ZodTypeAny, {
    method: string;
    params?: z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: string;
    params?: z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>;
declare const ResultSchema: z.ZodObject<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, z.ZodTypeAny, "passthrough">>;
/**
 * A uniquely identifying ID for a request in JSON-RPC.
 */
declare const RequestIdSchema: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
declare const JSONRPCMessageSchema: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
}, {
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}>, "strict", z.ZodTypeAny, {
    method: string;
    jsonrpc: "2.0";
    id: string | number;
    params?: z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: string;
    jsonrpc: "2.0";
    id: string | number;
    params?: z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    jsonrpc: z.ZodLiteral<"2.0">;
}, {
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}>, "strict", z.ZodTypeAny, {
    method: string;
    jsonrpc: "2.0";
    params?: z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: string;
    jsonrpc: "2.0";
    params?: z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    result: z.ZodObject<{
        /**
         * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>;
}, "strict", z.ZodTypeAny, {
    jsonrpc: "2.0";
    id: string | number;
    result: {
        _meta?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
}, {
    jsonrpc: "2.0";
    id: string | number;
    result: {
        _meta?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
}>, z.ZodObject<{
    jsonrpc: z.ZodLiteral<"2.0">;
    id: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    error: z.ZodObject<{
        /**
         * The error type that occurred.
         */
        code: z.ZodNumber;
        /**
         * A short description of the error. The message SHOULD be limited to a concise single sentence.
         */
        message: z.ZodString;
        /**
         * Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).
         */
        data: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        code: number;
        message: string;
        data?: unknown;
    }, {
        code: number;
        message: string;
        data?: unknown;
    }>;
}, "strict", z.ZodTypeAny, {
    jsonrpc: "2.0";
    id: string | number;
    error: {
        code: number;
        message: string;
        data?: unknown;
    };
}, {
    jsonrpc: "2.0";
    id: string | number;
    error: {
        code: number;
        message: string;
        data?: unknown;
    };
}>]>;
/**
 * Describes the name and version of an MCP implementation.
 */
declare const ImplementationSchema: z.ZodObject<{
    name: z.ZodString;
    version: z.ZodString;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    name: z.ZodString;
    version: z.ZodString;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    name: z.ZodString;
    version: z.ZodString;
}, z.ZodTypeAny, "passthrough">>;
/**
 * Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.
 */
declare const ClientCapabilitiesSchema: z.ZodObject<{
    /**
     * Experimental, non-standard capabilities that the client supports.
     */
    experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the client supports sampling from an LLM.
     */
    sampling: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the client supports listing roots.
     */
    roots: z.ZodOptional<z.ZodObject<{
        /**
         * Whether the client supports issuing notifications for changes to the roots list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Whether the client supports issuing notifications for changes to the roots list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Whether the client supports issuing notifications for changes to the roots list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    /**
     * Experimental, non-standard capabilities that the client supports.
     */
    experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the client supports sampling from an LLM.
     */
    sampling: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the client supports listing roots.
     */
    roots: z.ZodOptional<z.ZodObject<{
        /**
         * Whether the client supports issuing notifications for changes to the roots list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Whether the client supports issuing notifications for changes to the roots list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Whether the client supports issuing notifications for changes to the roots list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    /**
     * Experimental, non-standard capabilities that the client supports.
     */
    experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the client supports sampling from an LLM.
     */
    sampling: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the client supports listing roots.
     */
    roots: z.ZodOptional<z.ZodObject<{
        /**
         * Whether the client supports issuing notifications for changes to the roots list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Whether the client supports issuing notifications for changes to the roots list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Whether the client supports issuing notifications for changes to the roots list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>>;
}, z.ZodTypeAny, "passthrough">>;
/**
 * Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.
 */
declare const ServerCapabilitiesSchema: z.ZodObject<{
    /**
     * Experimental, non-standard capabilities that the server supports.
     */
    experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server supports sending log messages to the client.
     */
    logging: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server supports sending completions to the client.
     */
    completions: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server offers any prompt templates.
     */
    prompts: z.ZodOptional<z.ZodObject<{
        /**
         * Whether this server supports issuing notifications for changes to the prompt list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Whether this server supports issuing notifications for changes to the prompt list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Whether this server supports issuing notifications for changes to the prompt list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server offers any resources to read.
     */
    resources: z.ZodOptional<z.ZodObject<{
        /**
         * Whether this server supports clients subscribing to resource updates.
         */
        subscribe: z.ZodOptional<z.ZodBoolean>;
        /**
         * Whether this server supports issuing notifications for changes to the resource list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Whether this server supports clients subscribing to resource updates.
         */
        subscribe: z.ZodOptional<z.ZodBoolean>;
        /**
         * Whether this server supports issuing notifications for changes to the resource list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Whether this server supports clients subscribing to resource updates.
         */
        subscribe: z.ZodOptional<z.ZodBoolean>;
        /**
         * Whether this server supports issuing notifications for changes to the resource list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server offers any tools to call.
     */
    tools: z.ZodOptional<z.ZodObject<{
        /**
         * Whether this server supports issuing notifications for changes to the tool list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Whether this server supports issuing notifications for changes to the tool list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Whether this server supports issuing notifications for changes to the tool list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    /**
     * Experimental, non-standard capabilities that the server supports.
     */
    experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server supports sending log messages to the client.
     */
    logging: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server supports sending completions to the client.
     */
    completions: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server offers any prompt templates.
     */
    prompts: z.ZodOptional<z.ZodObject<{
        /**
         * Whether this server supports issuing notifications for changes to the prompt list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Whether this server supports issuing notifications for changes to the prompt list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Whether this server supports issuing notifications for changes to the prompt list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server offers any resources to read.
     */
    resources: z.ZodOptional<z.ZodObject<{
        /**
         * Whether this server supports clients subscribing to resource updates.
         */
        subscribe: z.ZodOptional<z.ZodBoolean>;
        /**
         * Whether this server supports issuing notifications for changes to the resource list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Whether this server supports clients subscribing to resource updates.
         */
        subscribe: z.ZodOptional<z.ZodBoolean>;
        /**
         * Whether this server supports issuing notifications for changes to the resource list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Whether this server supports clients subscribing to resource updates.
         */
        subscribe: z.ZodOptional<z.ZodBoolean>;
        /**
         * Whether this server supports issuing notifications for changes to the resource list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server offers any tools to call.
     */
    tools: z.ZodOptional<z.ZodObject<{
        /**
         * Whether this server supports issuing notifications for changes to the tool list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Whether this server supports issuing notifications for changes to the tool list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Whether this server supports issuing notifications for changes to the tool list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    /**
     * Experimental, non-standard capabilities that the server supports.
     */
    experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server supports sending log messages to the client.
     */
    logging: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server supports sending completions to the client.
     */
    completions: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server offers any prompt templates.
     */
    prompts: z.ZodOptional<z.ZodObject<{
        /**
         * Whether this server supports issuing notifications for changes to the prompt list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Whether this server supports issuing notifications for changes to the prompt list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Whether this server supports issuing notifications for changes to the prompt list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server offers any resources to read.
     */
    resources: z.ZodOptional<z.ZodObject<{
        /**
         * Whether this server supports clients subscribing to resource updates.
         */
        subscribe: z.ZodOptional<z.ZodBoolean>;
        /**
         * Whether this server supports issuing notifications for changes to the resource list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Whether this server supports clients subscribing to resource updates.
         */
        subscribe: z.ZodOptional<z.ZodBoolean>;
        /**
         * Whether this server supports issuing notifications for changes to the resource list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Whether this server supports clients subscribing to resource updates.
         */
        subscribe: z.ZodOptional<z.ZodBoolean>;
        /**
         * Whether this server supports issuing notifications for changes to the resource list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>>;
    /**
     * Present if the server offers any tools to call.
     */
    tools: z.ZodOptional<z.ZodObject<{
        /**
         * Whether this server supports issuing notifications for changes to the tool list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Whether this server supports issuing notifications for changes to the tool list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Whether this server supports issuing notifications for changes to the tool list.
         */
        listChanged: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>>;
}, z.ZodTypeAny, "passthrough">>;
declare const ProgressSchema: z.ZodObject<{
    /**
     * The progress thus far. This should increase every time progress is made, even if the total is unknown.
     */
    progress: z.ZodNumber;
    /**
     * Total number of items to process (or total progress required), if known.
     */
    total: z.ZodOptional<z.ZodNumber>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    /**
     * The progress thus far. This should increase every time progress is made, even if the total is unknown.
     */
    progress: z.ZodNumber;
    /**
     * Total number of items to process (or total progress required), if known.
     */
    total: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    /**
     * The progress thus far. This should increase every time progress is made, even if the total is unknown.
     */
    progress: z.ZodNumber;
    /**
     * Total number of items to process (or total progress required), if known.
     */
    total: z.ZodOptional<z.ZodNumber>;
}, z.ZodTypeAny, "passthrough">>;
/**
 * A known resource that the server is capable of reading.
 */
declare const ResourceSchema: z.ZodObject<{
    /**
     * The URI of this resource.
     */
    uri: z.ZodString;
    /**
     * A human-readable name for this resource.
     *
     * This can be used by clients to populate UI elements.
     */
    name: z.ZodString;
    /**
     * A description of what this resource represents.
     *
     * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
     */
    description: z.ZodOptional<z.ZodString>;
    /**
     * The MIME type of this resource, if known.
     */
    mimeType: z.ZodOptional<z.ZodString>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    /**
     * The URI of this resource.
     */
    uri: z.ZodString;
    /**
     * A human-readable name for this resource.
     *
     * This can be used by clients to populate UI elements.
     */
    name: z.ZodString;
    /**
     * A description of what this resource represents.
     *
     * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
     */
    description: z.ZodOptional<z.ZodString>;
    /**
     * The MIME type of this resource, if known.
     */
    mimeType: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    /**
     * The URI of this resource.
     */
    uri: z.ZodString;
    /**
     * A human-readable name for this resource.
     *
     * This can be used by clients to populate UI elements.
     */
    name: z.ZodString;
    /**
     * A description of what this resource represents.
     *
     * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
     */
    description: z.ZodOptional<z.ZodString>;
    /**
     * The MIME type of this resource, if known.
     */
    mimeType: z.ZodOptional<z.ZodString>;
}, z.ZodTypeAny, "passthrough">>;
/**
 * Sent from the client to request a list of resources the server has.
 */
declare const ListResourcesRequestSchema: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    params: z.ZodOptional<z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">>>;
}>, {
    method: z.ZodLiteral<"resources/list">;
}>, "strip", z.ZodTypeAny, {
    method: "resources/list";
    params?: z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "resources/list";
    params?: z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}>;
/**
 * The server's response to a resources/list request from the client.
 */
declare const ListResourcesResultSchema: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    resources: z.ZodArray<z.ZodObject<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    resources: z.ZodArray<z.ZodObject<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    resources: z.ZodArray<z.ZodObject<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">>;
/**
 * Sent from the client to request a list of resource templates the server has.
 */
declare const ListResourceTemplatesRequestSchema: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    params: z.ZodOptional<z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">>>;
}>, {
    method: z.ZodLiteral<"resources/templates/list">;
}>, "strip", z.ZodTypeAny, {
    method: "resources/templates/list";
    params?: z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "resources/templates/list";
    params?: z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}>;
/**
 * Sent from the client to the server, to read a specific resource URI.
 */
declare const ReadResourceRequestSchema: z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"resources/read">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
         */
        uri: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        uri: string;
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "resources/read";
}, {
    params: {
        uri: string;
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "resources/read";
}>;
/**
 * The server's response to a resources/read request from the client.
 */
declare const ReadResourceResultSchema: z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    contents: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>]>, "many">;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    contents: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>]>, "many">;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    contents: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>]>, "many">;
}>, z.ZodTypeAny, "passthrough">>;
/**
 * Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.
 */
declare const SubscribeRequestSchema: z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"resources/subscribe">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
         */
        uri: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        uri: string;
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "resources/subscribe";
}, {
    params: {
        uri: string;
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "resources/subscribe";
}>;
/**
 * Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.
 */
declare const UnsubscribeRequestSchema: z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"resources/unsubscribe">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to unsubscribe from.
         */
        uri: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to unsubscribe from.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to unsubscribe from.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        uri: string;
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "resources/unsubscribe";
}, {
    params: {
        uri: string;
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "resources/unsubscribe";
}>;
/**
 * A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.
 */
declare const ResourceUpdatedNotificationSchema: z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/resources/updated">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.
         */
        uri: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        uri: string;
        _meta?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/resources/updated";
}, {
    params: {
        uri: string;
        _meta?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/resources/updated";
}>;
/**
 * Sent from the client to request a list of prompts and prompt templates the server has.
 */
declare const ListPromptsRequestSchema: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    params: z.ZodOptional<z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">>>;
}>, {
    method: z.ZodLiteral<"prompts/list">;
}>, "strip", z.ZodTypeAny, {
    method: "prompts/list";
    params?: z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "prompts/list";
    params?: z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}>;
/**
 * Used by the client to get a prompt provided by the server.
 */
declare const GetPromptRequestSchema: z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"prompts/get">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * Arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * Arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * Arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        name: string;
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        arguments?: Record<string, string> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "prompts/get";
}, {
    params: {
        name: string;
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        arguments?: Record<string, string> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "prompts/get";
}>;
/**
 * The server's response to a prompts/get request from the client.
 */
declare const GetPromptResultSchema: z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An optional description for the prompt.
     */
    description: z.ZodOptional<z.ZodString>;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An optional description for the prompt.
     */
    description: z.ZodOptional<z.ZodString>;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An optional description for the prompt.
     */
    description: z.ZodOptional<z.ZodString>;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">>;
/**
 * Additional properties describing a Tool to clients.
 *
 * NOTE: all properties in ToolAnnotations are **hints**.
 * They are not guaranteed to provide a faithful description of
 * tool behavior (including descriptive properties like `title`).
 *
 * Clients should never make tool use decisions based on ToolAnnotations
 * received from untrusted servers.
 */
declare const ToolAnnotationsSchema: z.ZodObject<{
    /**
     * A human-readable title for the tool.
     */
    title: z.ZodOptional<z.ZodString>;
    /**
     * If true, the tool does not modify its environment.
     *
     * Default: false
     */
    readOnlyHint: z.ZodOptional<z.ZodBoolean>;
    /**
     * If true, the tool may perform destructive updates to its environment.
     * If false, the tool performs only additive updates.
     *
     * (This property is meaningful only when `readOnlyHint == false`)
     *
     * Default: true
     */
    destructiveHint: z.ZodOptional<z.ZodBoolean>;
    /**
     * If true, calling the tool repeatedly with the same arguments
     * will have no additional effect on the its environment.
     *
     * (This property is meaningful only when `readOnlyHint == false`)
     *
     * Default: false
     */
    idempotentHint: z.ZodOptional<z.ZodBoolean>;
    /**
     * If true, this tool may interact with an "open world" of external
     * entities. If false, the tool's domain of interaction is closed.
     * For example, the world of a web search tool is open, whereas that
     * of a memory tool is not.
     *
     * Default: true
     */
    openWorldHint: z.ZodOptional<z.ZodBoolean>;
}, "passthrough", z.ZodTypeAny, z.objectOutputType<{
    /**
     * A human-readable title for the tool.
     */
    title: z.ZodOptional<z.ZodString>;
    /**
     * If true, the tool does not modify its environment.
     *
     * Default: false
     */
    readOnlyHint: z.ZodOptional<z.ZodBoolean>;
    /**
     * If true, the tool may perform destructive updates to its environment.
     * If false, the tool performs only additive updates.
     *
     * (This property is meaningful only when `readOnlyHint == false`)
     *
     * Default: true
     */
    destructiveHint: z.ZodOptional<z.ZodBoolean>;
    /**
     * If true, calling the tool repeatedly with the same arguments
     * will have no additional effect on the its environment.
     *
     * (This property is meaningful only when `readOnlyHint == false`)
     *
     * Default: false
     */
    idempotentHint: z.ZodOptional<z.ZodBoolean>;
    /**
     * If true, this tool may interact with an "open world" of external
     * entities. If false, the tool's domain of interaction is closed.
     * For example, the world of a web search tool is open, whereas that
     * of a memory tool is not.
     *
     * Default: true
     */
    openWorldHint: z.ZodOptional<z.ZodBoolean>;
}, z.ZodTypeAny, "passthrough">, z.objectInputType<{
    /**
     * A human-readable title for the tool.
     */
    title: z.ZodOptional<z.ZodString>;
    /**
     * If true, the tool does not modify its environment.
     *
     * Default: false
     */
    readOnlyHint: z.ZodOptional<z.ZodBoolean>;
    /**
     * If true, the tool may perform destructive updates to its environment.
     * If false, the tool performs only additive updates.
     *
     * (This property is meaningful only when `readOnlyHint == false`)
     *
     * Default: true
     */
    destructiveHint: z.ZodOptional<z.ZodBoolean>;
    /**
     * If true, calling the tool repeatedly with the same arguments
     * will have no additional effect on the its environment.
     *
     * (This property is meaningful only when `readOnlyHint == false`)
     *
     * Default: false
     */
    idempotentHint: z.ZodOptional<z.ZodBoolean>;
    /**
     * If true, this tool may interact with an "open world" of external
     * entities. If false, the tool's domain of interaction is closed.
     * For example, the world of a web search tool is open, whereas that
     * of a memory tool is not.
     *
     * Default: true
     */
    openWorldHint: z.ZodOptional<z.ZodBoolean>;
}, z.ZodTypeAny, "passthrough">>;
/**
 * Sent from the client to request a list of tools the server has.
 */
declare const ListToolsRequestSchema: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    params: z.ZodOptional<z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">>>;
}>, {
    method: z.ZodLiteral<"tools/list">;
}>, "strip", z.ZodTypeAny, {
    method: "tools/list";
    params?: z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "tools/list";
    params?: z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}>;
declare const CallToolResultSchema: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool does not define an outputSchema, this field MUST be present in the result.
     */
    content: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    /**
     * Structured output must not be provided in an unstructured tool result.
     */
    structuredContent: z.ZodOptional<z.ZodNever>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool does not define an outputSchema, this field MUST be present in the result.
     */
    content: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    /**
     * Structured output must not be provided in an unstructured tool result.
     */
    structuredContent: z.ZodOptional<z.ZodNever>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool does not define an outputSchema, this field MUST be present in the result.
     */
    content: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    /**
     * Structured output must not be provided in an unstructured tool result.
     */
    structuredContent: z.ZodOptional<z.ZodNever>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An object containing structured tool output.
     *
     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.
     */
    structuredContent: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool defines an outputSchema, this field MAY be present in the result.
     *
     * Tools may use this field to provide compatibility with older clients that
     * do not support structured content.
     *
     * Clients that support structured content should ignore this field.
     */
    content: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An object containing structured tool output.
     *
     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.
     */
    structuredContent: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool defines an outputSchema, this field MAY be present in the result.
     *
     * Tools may use this field to provide compatibility with older clients that
     * do not support structured content.
     *
     * Clients that support structured content should ignore this field.
     */
    content: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An object containing structured tool output.
     *
     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.
     */
    structuredContent: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool defines an outputSchema, this field MAY be present in the result.
     *
     * Tools may use this field to provide compatibility with older clients that
     * do not support structured content.
     *
     * Clients that support structured content should ignore this field.
     */
    content: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, z.ZodTypeAny, "passthrough">>]>;
/**
 * CallToolResultSchema extended with backwards compatibility to protocol version 2024-10-07.
 */
declare const CompatibilityCallToolResultSchema: z.ZodUnion<[z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool does not define an outputSchema, this field MUST be present in the result.
     */
    content: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    /**
     * Structured output must not be provided in an unstructured tool result.
     */
    structuredContent: z.ZodOptional<z.ZodNever>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool does not define an outputSchema, this field MUST be present in the result.
     */
    content: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    /**
     * Structured output must not be provided in an unstructured tool result.
     */
    structuredContent: z.ZodOptional<z.ZodNever>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool does not define an outputSchema, this field MUST be present in the result.
     */
    content: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    /**
     * Structured output must not be provided in an unstructured tool result.
     */
    structuredContent: z.ZodOptional<z.ZodNever>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An object containing structured tool output.
     *
     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.
     */
    structuredContent: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool defines an outputSchema, this field MAY be present in the result.
     *
     * Tools may use this field to provide compatibility with older clients that
     * do not support structured content.
     *
     * Clients that support structured content should ignore this field.
     */
    content: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An object containing structured tool output.
     *
     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.
     */
    structuredContent: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool defines an outputSchema, this field MAY be present in the result.
     *
     * Tools may use this field to provide compatibility with older clients that
     * do not support structured content.
     *
     * Clients that support structured content should ignore this field.
     */
    content: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An object containing structured tool output.
     *
     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.
     */
    structuredContent: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool defines an outputSchema, this field MAY be present in the result.
     *
     * Tools may use this field to provide compatibility with older clients that
     * do not support structured content.
     *
     * Clients that support structured content should ignore this field.
     */
    content: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    toolResult: z.ZodUnknown;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    toolResult: z.ZodUnknown;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    toolResult: z.ZodUnknown;
}>, z.ZodTypeAny, "passthrough">>]>;
/**
 * Used by the client to invoke a tool provided by the server.
 */
declare const CallToolRequestSchema: z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"tools/call">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        name: z.ZodString;
        arguments: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        name: z.ZodString;
        arguments: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        name: z.ZodString;
        arguments: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        name: string;
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        arguments?: Record<string, unknown> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "tools/call";
}, {
    params: {
        name: string;
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        arguments?: Record<string, unknown> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "tools/call";
}>;
/**
 * The severity of a log message.
 */
declare const LoggingLevelSchema: z.ZodEnum<["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]>;
/**
 * Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.
 */
declare const LoggingMessageNotificationSchema: z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/message">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The severity of this log message.
         */
        level: z.ZodEnum<["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]>;
        /**
         * An optional name of the logger issuing this message.
         */
        logger: z.ZodOptional<z.ZodString>;
        /**
         * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.
         */
        data: z.ZodUnknown;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The severity of this log message.
         */
        level: z.ZodEnum<["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]>;
        /**
         * An optional name of the logger issuing this message.
         */
        logger: z.ZodOptional<z.ZodString>;
        /**
         * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.
         */
        data: z.ZodUnknown;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The severity of this log message.
         */
        level: z.ZodEnum<["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]>;
        /**
         * An optional name of the logger issuing this message.
         */
        logger: z.ZodOptional<z.ZodString>;
        /**
         * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.
         */
        data: z.ZodUnknown;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        level: "error" | "debug" | "info" | "notice" | "warning" | "critical" | "alert" | "emergency";
        _meta?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        data?: unknown;
        logger?: string | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/message";
}, {
    params: {
        level: "error" | "debug" | "info" | "notice" | "warning" | "critical" | "alert" | "emergency";
        _meta?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        data?: unknown;
        logger?: string | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/message";
}>;
/**
 * A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.
 */
declare const CreateMessageRequestSchema: z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"sampling/createMessage">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        messages: z.ZodArray<z.ZodObject<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        /**
         * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.
         */
        systemPrompt: z.ZodOptional<z.ZodString>;
        /**
         * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.
         */
        includeContext: z.ZodOptional<z.ZodEnum<["none", "thisServer", "allServers"]>>;
        temperature: z.ZodOptional<z.ZodNumber>;
        /**
         * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.
         */
        maxTokens: z.ZodNumber;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        /**
         * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.
         */
        metadata: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * The server's preferences for which model to select.
         */
        modelPreferences: z.ZodOptional<z.ZodObject<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        messages: z.ZodArray<z.ZodObject<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        /**
         * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.
         */
        systemPrompt: z.ZodOptional<z.ZodString>;
        /**
         * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.
         */
        includeContext: z.ZodOptional<z.ZodEnum<["none", "thisServer", "allServers"]>>;
        temperature: z.ZodOptional<z.ZodNumber>;
        /**
         * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.
         */
        maxTokens: z.ZodNumber;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        /**
         * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.
         */
        metadata: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * The server's preferences for which model to select.
         */
        modelPreferences: z.ZodOptional<z.ZodObject<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        messages: z.ZodArray<z.ZodObject<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        /**
         * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.
         */
        systemPrompt: z.ZodOptional<z.ZodString>;
        /**
         * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.
         */
        includeContext: z.ZodOptional<z.ZodEnum<["none", "thisServer", "allServers"]>>;
        temperature: z.ZodOptional<z.ZodNumber>;
        /**
         * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.
         */
        maxTokens: z.ZodNumber;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        /**
         * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.
         */
        metadata: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * The server's preferences for which model to select.
         */
        modelPreferences: z.ZodOptional<z.ZodObject<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        messages: z.objectOutputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">[];
        maxTokens: number;
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        systemPrompt?: string | undefined;
        includeContext?: "none" | "thisServer" | "allServers" | undefined;
        temperature?: number | undefined;
        stopSequences?: string[] | undefined;
        metadata?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        modelPreferences?: z.objectOutputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "sampling/createMessage";
}, {
    params: {
        messages: z.objectInputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">[];
        maxTokens: number;
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        systemPrompt?: string | undefined;
        includeContext?: "none" | "thisServer" | "allServers" | undefined;
        temperature?: number | undefined;
        stopSequences?: string[] | undefined;
        metadata?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        modelPreferences?: z.objectInputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "sampling/createMessage";
}>;
/**
 * A request from the client to the server, to ask for completion options.
 */
declare const CompleteRequestSchema: z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"completion/complete">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        ref: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>;
        /**
         * The argument's information
         */
        argument: z.ZodObject<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        ref: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>;
        /**
         * The argument's information
         */
        argument: z.ZodObject<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        ref: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>;
        /**
         * The argument's information
         */
        argument: z.ZodObject<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        ref: z.objectOutputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">;
        argument: {
            value: string;
            name: string;
        } & {
            [k: string]: unknown;
        };
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "completion/complete";
}, {
    params: {
        ref: z.objectInputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">;
        argument: {
            value: string;
            name: string;
        } & {
            [k: string]: unknown;
        };
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "completion/complete";
}>;
/**
 * Sent from the server to request a list of root URIs from the client.
 */
declare const ListRootsRequestSchema: z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"roots/list">;
}>, "strip", z.ZodTypeAny, {
    method: "roots/list";
    params?: z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "roots/list";
    params?: z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>;
declare const ClientRequestSchema: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"ping">;
}>, "strip", z.ZodTypeAny, {
    method: "ping";
    params?: z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "ping";
    params?: z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"initialize">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.
         */
        protocolVersion: z.ZodString;
        capabilities: z.ZodObject<{
            /**
             * Experimental, non-standard capabilities that the client supports.
             */
            experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports sampling from an LLM.
             */
            sampling: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports listing roots.
             */
            roots: z.ZodOptional<z.ZodObject<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Experimental, non-standard capabilities that the client supports.
             */
            experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports sampling from an LLM.
             */
            sampling: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports listing roots.
             */
            roots: z.ZodOptional<z.ZodObject<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Experimental, non-standard capabilities that the client supports.
             */
            experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports sampling from an LLM.
             */
            sampling: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports listing roots.
             */
            roots: z.ZodOptional<z.ZodObject<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">>;
        clientInfo: z.ZodObject<{
            name: z.ZodString;
            version: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            name: z.ZodString;
            version: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            name: z.ZodString;
            version: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.
         */
        protocolVersion: z.ZodString;
        capabilities: z.ZodObject<{
            /**
             * Experimental, non-standard capabilities that the client supports.
             */
            experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports sampling from an LLM.
             */
            sampling: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports listing roots.
             */
            roots: z.ZodOptional<z.ZodObject<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Experimental, non-standard capabilities that the client supports.
             */
            experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports sampling from an LLM.
             */
            sampling: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports listing roots.
             */
            roots: z.ZodOptional<z.ZodObject<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Experimental, non-standard capabilities that the client supports.
             */
            experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports sampling from an LLM.
             */
            sampling: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports listing roots.
             */
            roots: z.ZodOptional<z.ZodObject<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">>;
        clientInfo: z.ZodObject<{
            name: z.ZodString;
            version: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            name: z.ZodString;
            version: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            name: z.ZodString;
            version: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.
         */
        protocolVersion: z.ZodString;
        capabilities: z.ZodObject<{
            /**
             * Experimental, non-standard capabilities that the client supports.
             */
            experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports sampling from an LLM.
             */
            sampling: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports listing roots.
             */
            roots: z.ZodOptional<z.ZodObject<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Experimental, non-standard capabilities that the client supports.
             */
            experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports sampling from an LLM.
             */
            sampling: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports listing roots.
             */
            roots: z.ZodOptional<z.ZodObject<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Experimental, non-standard capabilities that the client supports.
             */
            experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports sampling from an LLM.
             */
            sampling: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            /**
             * Present if the client supports listing roots.
             */
            roots: z.ZodOptional<z.ZodObject<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough">>>;
        }, z.ZodTypeAny, "passthrough">>;
        clientInfo: z.ZodObject<{
            name: z.ZodString;
            version: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            name: z.ZodString;
            version: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            name: z.ZodString;
            version: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        protocolVersion: string;
        capabilities: {
            experimental?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            sampling?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            roots?: z.objectOutputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
        } & {
            [k: string]: unknown;
        };
        clientInfo: {
            name: string;
            version: string;
        } & {
            [k: string]: unknown;
        };
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "initialize";
}, {
    params: {
        protocolVersion: string;
        capabilities: {
            experimental?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            sampling?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            roots?: z.objectInputType<{
                /**
                 * Whether the client supports issuing notifications for changes to the roots list.
                 */
                listChanged: z.ZodOptional<z.ZodBoolean>;
            }, z.ZodTypeAny, "passthrough"> | undefined;
        } & {
            [k: string]: unknown;
        };
        clientInfo: {
            name: string;
            version: string;
        } & {
            [k: string]: unknown;
        };
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "initialize";
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"completion/complete">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        ref: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>;
        /**
         * The argument's information
         */
        argument: z.ZodObject<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        ref: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>;
        /**
         * The argument's information
         */
        argument: z.ZodObject<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        ref: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>]>;
        /**
         * The argument's information
         */
        argument: z.ZodObject<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument
             */
            name: z.ZodString;
            /**
             * The value of the argument to use for completion matching.
             */
            value: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        ref: z.objectOutputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough"> | z.objectOutputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">;
        argument: {
            value: string;
            name: string;
        } & {
            [k: string]: unknown;
        };
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "completion/complete";
}, {
    params: {
        ref: z.objectInputType<{
            type: z.ZodLiteral<"ref/resource">;
            /**
             * The URI or URI template of the resource.
             */
            uri: z.ZodString;
        }, z.ZodTypeAny, "passthrough"> | z.objectInputType<{
            type: z.ZodLiteral<"ref/prompt">;
            /**
             * The name of the prompt or prompt template
             */
            name: z.ZodString;
        }, z.ZodTypeAny, "passthrough">;
        argument: {
            value: string;
            name: string;
        } & {
            [k: string]: unknown;
        };
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "completion/complete";
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"logging/setLevel">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/logging/message.
         */
        level: z.ZodEnum<["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/logging/message.
         */
        level: z.ZodEnum<["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/logging/message.
         */
        level: z.ZodEnum<["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        level: "error" | "debug" | "info" | "notice" | "warning" | "critical" | "alert" | "emergency";
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "logging/setLevel";
}, {
    params: {
        level: "error" | "debug" | "info" | "notice" | "warning" | "critical" | "alert" | "emergency";
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "logging/setLevel";
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"prompts/get">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * Arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * Arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * Arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        name: string;
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        arguments?: Record<string, string> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "prompts/get";
}, {
    params: {
        name: string;
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        arguments?: Record<string, string> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "prompts/get";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    params: z.ZodOptional<z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">>>;
}>, {
    method: z.ZodLiteral<"prompts/list">;
}>, "strip", z.ZodTypeAny, {
    method: "prompts/list";
    params?: z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "prompts/list";
    params?: z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    params: z.ZodOptional<z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">>>;
}>, {
    method: z.ZodLiteral<"resources/list">;
}>, "strip", z.ZodTypeAny, {
    method: "resources/list";
    params?: z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "resources/list";
    params?: z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    params: z.ZodOptional<z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">>>;
}>, {
    method: z.ZodLiteral<"resources/templates/list">;
}>, "strip", z.ZodTypeAny, {
    method: "resources/templates/list";
    params?: z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "resources/templates/list";
    params?: z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"resources/read">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
         */
        uri: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        uri: string;
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "resources/read";
}, {
    params: {
        uri: string;
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "resources/read";
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"resources/subscribe">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
         */
        uri: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        uri: string;
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "resources/subscribe";
}, {
    params: {
        uri: string;
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "resources/subscribe";
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"resources/unsubscribe">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to unsubscribe from.
         */
        uri: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to unsubscribe from.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource to unsubscribe from.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        uri: string;
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "resources/unsubscribe";
}, {
    params: {
        uri: string;
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "resources/unsubscribe";
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"tools/call">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        name: z.ZodString;
        arguments: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        name: z.ZodString;
        arguments: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        name: z.ZodString;
        arguments: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        name: string;
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        arguments?: Record<string, unknown> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "tools/call";
}, {
    params: {
        name: string;
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        arguments?: Record<string, unknown> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "tools/call";
}>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    params: z.ZodOptional<z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">>>;
}>, {
    method: z.ZodLiteral<"tools/list">;
}>, "strip", z.ZodTypeAny, {
    method: "tools/list";
    params?: z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "tools/list";
    params?: z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * An opaque token representing the current pagination position.
         * If provided, the server should return results starting after this cursor.
         */
        cursor: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough"> | undefined;
}>]>;
declare const ClientNotificationSchema: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/cancelled">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The ID of the request to cancel.
         *
         * This MUST correspond to the ID of a request previously issued in the same direction.
         */
        requestId: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        /**
         * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.
         */
        reason: z.ZodOptional<z.ZodString>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The ID of the request to cancel.
         *
         * This MUST correspond to the ID of a request previously issued in the same direction.
         */
        requestId: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        /**
         * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.
         */
        reason: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The ID of the request to cancel.
         *
         * This MUST correspond to the ID of a request previously issued in the same direction.
         */
        requestId: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        /**
         * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.
         */
        reason: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        requestId: string | number;
        _meta?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        reason?: string | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/cancelled";
}, {
    params: {
        requestId: string | number;
        _meta?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        reason?: string | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/cancelled";
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/progress">;
    params: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The progress thus far. This should increase every time progress is made, even if the total is unknown.
         */
        progress: z.ZodNumber;
        /**
         * Total number of items to process (or total progress required), if known.
         */
        total: z.ZodOptional<z.ZodNumber>;
    }>, {
        /**
         * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.
         */
        progressToken: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The progress thus far. This should increase every time progress is made, even if the total is unknown.
         */
        progress: z.ZodNumber;
        /**
         * Total number of items to process (or total progress required), if known.
         */
        total: z.ZodOptional<z.ZodNumber>;
    }>, {
        /**
         * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.
         */
        progressToken: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The progress thus far. This should increase every time progress is made, even if the total is unknown.
         */
        progress: z.ZodNumber;
        /**
         * Total number of items to process (or total progress required), if known.
         */
        total: z.ZodOptional<z.ZodNumber>;
    }>, {
        /**
         * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.
         */
        progressToken: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        progressToken: string | number;
        progress: number;
        _meta?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        total?: number | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/progress";
}, {
    params: {
        progressToken: string | number;
        progress: number;
        _meta?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        total?: number | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/progress";
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/initialized">;
}>, "strip", z.ZodTypeAny, {
    method: "notifications/initialized";
    params?: z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "notifications/initialized";
    params?: z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/roots/list_changed">;
}>, "strip", z.ZodTypeAny, {
    method: "notifications/roots/list_changed";
    params?: z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "notifications/roots/list_changed";
    params?: z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>]>;
declare const ClientResultSchema: z.ZodUnion<[z.ZodObject<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, "strict", z.ZodTypeAny, {
    _meta?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    _meta?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * The name of the model that generated the message.
     */
    model: z.ZodString;
    /**
     * The reason why sampling stopped.
     */
    stopReason: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["endTurn", "stopSequence", "maxTokens"]>, z.ZodString]>>;
    role: z.ZodEnum<["user", "assistant"]>;
    content: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>]>;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * The name of the model that generated the message.
     */
    model: z.ZodString;
    /**
     * The reason why sampling stopped.
     */
    stopReason: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["endTurn", "stopSequence", "maxTokens"]>, z.ZodString]>>;
    role: z.ZodEnum<["user", "assistant"]>;
    content: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>]>;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * The name of the model that generated the message.
     */
    model: z.ZodString;
    /**
     * The reason why sampling stopped.
     */
    stopReason: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["endTurn", "stopSequence", "maxTokens"]>, z.ZodString]>>;
    role: z.ZodEnum<["user", "assistant"]>;
    content: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>]>;
}>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    roots: z.ZodArray<z.ZodObject<{
        /**
         * The URI identifying the root. This *must* start with file:// for now.
         */
        uri: z.ZodString;
        /**
         * An optional name for the root.
         */
        name: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The URI identifying the root. This *must* start with file:// for now.
         */
        uri: z.ZodString;
        /**
         * An optional name for the root.
         */
        name: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The URI identifying the root. This *must* start with file:// for now.
         */
        uri: z.ZodString;
        /**
         * An optional name for the root.
         */
        name: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    roots: z.ZodArray<z.ZodObject<{
        /**
         * The URI identifying the root. This *must* start with file:// for now.
         */
        uri: z.ZodString;
        /**
         * An optional name for the root.
         */
        name: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The URI identifying the root. This *must* start with file:// for now.
         */
        uri: z.ZodString;
        /**
         * An optional name for the root.
         */
        name: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The URI identifying the root. This *must* start with file:// for now.
         */
        uri: z.ZodString;
        /**
         * An optional name for the root.
         */
        name: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    roots: z.ZodArray<z.ZodObject<{
        /**
         * The URI identifying the root. This *must* start with file:// for now.
         */
        uri: z.ZodString;
        /**
         * An optional name for the root.
         */
        name: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The URI identifying the root. This *must* start with file:// for now.
         */
        uri: z.ZodString;
        /**
         * An optional name for the root.
         */
        name: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The URI identifying the root. This *must* start with file:// for now.
         */
        uri: z.ZodString;
        /**
         * An optional name for the root.
         */
        name: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">>]>;
declare const ServerRequestSchema: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"ping">;
}>, "strip", z.ZodTypeAny, {
    method: "ping";
    params?: z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "ping";
    params?: z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"sampling/createMessage">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        messages: z.ZodArray<z.ZodObject<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        /**
         * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.
         */
        systemPrompt: z.ZodOptional<z.ZodString>;
        /**
         * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.
         */
        includeContext: z.ZodOptional<z.ZodEnum<["none", "thisServer", "allServers"]>>;
        temperature: z.ZodOptional<z.ZodNumber>;
        /**
         * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.
         */
        maxTokens: z.ZodNumber;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        /**
         * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.
         */
        metadata: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * The server's preferences for which model to select.
         */
        modelPreferences: z.ZodOptional<z.ZodObject<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        messages: z.ZodArray<z.ZodObject<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        /**
         * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.
         */
        systemPrompt: z.ZodOptional<z.ZodString>;
        /**
         * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.
         */
        includeContext: z.ZodOptional<z.ZodEnum<["none", "thisServer", "allServers"]>>;
        temperature: z.ZodOptional<z.ZodNumber>;
        /**
         * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.
         */
        maxTokens: z.ZodNumber;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        /**
         * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.
         */
        metadata: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * The server's preferences for which model to select.
         */
        modelPreferences: z.ZodOptional<z.ZodObject<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, {
        messages: z.ZodArray<z.ZodObject<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>, "many">;
        /**
         * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.
         */
        systemPrompt: z.ZodOptional<z.ZodString>;
        /**
         * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.
         */
        includeContext: z.ZodOptional<z.ZodEnum<["none", "thisServer", "allServers"]>>;
        temperature: z.ZodOptional<z.ZodNumber>;
        /**
         * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.
         */
        maxTokens: z.ZodNumber;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        /**
         * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.
         */
        metadata: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * The server's preferences for which model to select.
         */
        modelPreferences: z.ZodOptional<z.ZodObject<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough">>>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        messages: z.objectOutputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">[];
        maxTokens: number;
        _meta?: z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        systemPrompt?: string | undefined;
        includeContext?: "none" | "thisServer" | "allServers" | undefined;
        temperature?: number | undefined;
        stopSequences?: string[] | undefined;
        metadata?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        modelPreferences?: z.objectOutputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "sampling/createMessage";
}, {
    params: {
        messages: z.objectInputType<{
            role: z.ZodEnum<["user", "assistant"]>;
            content: z.ZodUnion<[z.ZodObject<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"text">;
                /**
                 * The text content of the message.
                 */
                text: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"image">;
                /**
                 * The base64-encoded image data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the image. Different providers may support different image types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                type: z.ZodLiteral<"audio">;
                /**
                 * The base64-encoded audio data.
                 */
                data: z.ZodString;
                /**
                 * The MIME type of the audio. Different providers may support different audio types.
                 */
                mimeType: z.ZodString;
            }, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">[];
        maxTokens: number;
        _meta?: z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        systemPrompt?: string | undefined;
        includeContext?: "none" | "thisServer" | "allServers" | undefined;
        temperature?: number | undefined;
        stopSequences?: string[] | undefined;
        metadata?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        modelPreferences?: z.objectInputType<{
            /**
             * Optional hints to use for model selection.
             */
            hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                /**
                 * A hint for a model name.
                 */
                name: z.ZodOptional<z.ZodString>;
            }, z.ZodTypeAny, "passthrough">>, "many">>;
            /**
             * How much to prioritize cost when selecting a model.
             */
            costPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize sampling speed (latency) when selecting a model.
             */
            speedPriority: z.ZodOptional<z.ZodNumber>;
            /**
             * How much to prioritize intelligence and capabilities when selecting a model.
             */
            intelligencePriority: z.ZodOptional<z.ZodNumber>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "sampling/createMessage";
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"roots/list">;
}>, "strip", z.ZodTypeAny, {
    method: "roots/list";
    params?: z.objectOutputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "roots/list";
    params?: z.objectInputType<{
        _meta: z.ZodOptional<z.ZodObject<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.
             */
            progressToken: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>]>;
declare const ServerNotificationSchema: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/cancelled">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The ID of the request to cancel.
         *
         * This MUST correspond to the ID of a request previously issued in the same direction.
         */
        requestId: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        /**
         * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.
         */
        reason: z.ZodOptional<z.ZodString>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The ID of the request to cancel.
         *
         * This MUST correspond to the ID of a request previously issued in the same direction.
         */
        requestId: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        /**
         * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.
         */
        reason: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The ID of the request to cancel.
         *
         * This MUST correspond to the ID of a request previously issued in the same direction.
         */
        requestId: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
        /**
         * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.
         */
        reason: z.ZodOptional<z.ZodString>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        requestId: string | number;
        _meta?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        reason?: string | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/cancelled";
}, {
    params: {
        requestId: string | number;
        _meta?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        reason?: string | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/cancelled";
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/progress">;
    params: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The progress thus far. This should increase every time progress is made, even if the total is unknown.
         */
        progress: z.ZodNumber;
        /**
         * Total number of items to process (or total progress required), if known.
         */
        total: z.ZodOptional<z.ZodNumber>;
    }>, {
        /**
         * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.
         */
        progressToken: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The progress thus far. This should increase every time progress is made, even if the total is unknown.
         */
        progress: z.ZodNumber;
        /**
         * Total number of items to process (or total progress required), if known.
         */
        total: z.ZodOptional<z.ZodNumber>;
    }>, {
        /**
         * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.
         */
        progressToken: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The progress thus far. This should increase every time progress is made, even if the total is unknown.
         */
        progress: z.ZodNumber;
        /**
         * Total number of items to process (or total progress required), if known.
         */
        total: z.ZodOptional<z.ZodNumber>;
    }>, {
        /**
         * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.
         */
        progressToken: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        progressToken: string | number;
        progress: number;
        _meta?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        total?: number | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/progress";
}, {
    params: {
        progressToken: string | number;
        progress: number;
        _meta?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        total?: number | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/progress";
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/message">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The severity of this log message.
         */
        level: z.ZodEnum<["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]>;
        /**
         * An optional name of the logger issuing this message.
         */
        logger: z.ZodOptional<z.ZodString>;
        /**
         * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.
         */
        data: z.ZodUnknown;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The severity of this log message.
         */
        level: z.ZodEnum<["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]>;
        /**
         * An optional name of the logger issuing this message.
         */
        logger: z.ZodOptional<z.ZodString>;
        /**
         * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.
         */
        data: z.ZodUnknown;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The severity of this log message.
         */
        level: z.ZodEnum<["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"]>;
        /**
         * An optional name of the logger issuing this message.
         */
        logger: z.ZodOptional<z.ZodString>;
        /**
         * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.
         */
        data: z.ZodUnknown;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        level: "error" | "debug" | "info" | "notice" | "warning" | "critical" | "alert" | "emergency";
        _meta?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        data?: unknown;
        logger?: string | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/message";
}, {
    params: {
        level: "error" | "debug" | "info" | "notice" | "warning" | "critical" | "alert" | "emergency";
        _meta?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
        data?: unknown;
        logger?: string | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/message";
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/resources/updated">;
    params: z.ZodObject<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.
         */
        uri: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, {
        /**
         * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.
         */
        uri: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>;
}>, "strip", z.ZodTypeAny, {
    params: {
        uri: string;
        _meta?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/resources/updated";
}, {
    params: {
        uri: string;
        _meta?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
    } & {
        [k: string]: unknown;
    };
    method: "notifications/resources/updated";
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/resources/list_changed">;
}>, "strip", z.ZodTypeAny, {
    method: "notifications/resources/list_changed";
    params?: z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "notifications/resources/list_changed";
    params?: z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/tools/list_changed">;
}>, "strip", z.ZodTypeAny, {
    method: "notifications/tools/list_changed";
    params?: z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "notifications/tools/list_changed";
    params?: z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    method: z.ZodString;
    params: z.ZodOptional<z.ZodObject<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>>;
}, {
    method: z.ZodLiteral<"notifications/prompts/list_changed">;
}>, "strip", z.ZodTypeAny, {
    method: "notifications/prompts/list_changed";
    params?: z.objectOutputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    method: "notifications/prompts/list_changed";
    params?: z.objectInputType<{
        /**
         * This parameter name is reserved by MCP to allow clients and servers to attach additional metadata to their notifications.
         */
        _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough"> | undefined;
}>]>;
declare const ServerResultSchema: z.ZodUnion<[z.ZodObject<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, "strict", z.ZodTypeAny, {
    _meta?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
}, {
    _meta?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.
     */
    protocolVersion: z.ZodString;
    capabilities: z.ZodObject<{
        /**
         * Experimental, non-standard capabilities that the server supports.
         */
        experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending log messages to the client.
         */
        logging: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending completions to the client.
         */
        completions: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any prompt templates.
         */
        prompts: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any resources to read.
         */
        resources: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any tools to call.
         */
        tools: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Experimental, non-standard capabilities that the server supports.
         */
        experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending log messages to the client.
         */
        logging: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending completions to the client.
         */
        completions: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any prompt templates.
         */
        prompts: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any resources to read.
         */
        resources: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any tools to call.
         */
        tools: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Experimental, non-standard capabilities that the server supports.
         */
        experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending log messages to the client.
         */
        logging: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending completions to the client.
         */
        completions: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any prompt templates.
         */
        prompts: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any resources to read.
         */
        resources: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any tools to call.
         */
        tools: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>;
    serverInfo: z.ZodObject<{
        name: z.ZodString;
        version: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        name: z.ZodString;
        version: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        name: z.ZodString;
        version: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>;
    /**
     * Instructions describing how to use the server and its features.
     *
     * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a "hint" to the model. For example, this information MAY be added to the system prompt.
     */
    instructions: z.ZodOptional<z.ZodString>;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.
     */
    protocolVersion: z.ZodString;
    capabilities: z.ZodObject<{
        /**
         * Experimental, non-standard capabilities that the server supports.
         */
        experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending log messages to the client.
         */
        logging: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending completions to the client.
         */
        completions: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any prompt templates.
         */
        prompts: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any resources to read.
         */
        resources: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any tools to call.
         */
        tools: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Experimental, non-standard capabilities that the server supports.
         */
        experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending log messages to the client.
         */
        logging: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending completions to the client.
         */
        completions: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any prompt templates.
         */
        prompts: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any resources to read.
         */
        resources: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any tools to call.
         */
        tools: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Experimental, non-standard capabilities that the server supports.
         */
        experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending log messages to the client.
         */
        logging: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending completions to the client.
         */
        completions: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any prompt templates.
         */
        prompts: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any resources to read.
         */
        resources: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any tools to call.
         */
        tools: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>;
    serverInfo: z.ZodObject<{
        name: z.ZodString;
        version: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        name: z.ZodString;
        version: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        name: z.ZodString;
        version: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>;
    /**
     * Instructions describing how to use the server and its features.
     *
     * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a "hint" to the model. For example, this information MAY be added to the system prompt.
     */
    instructions: z.ZodOptional<z.ZodString>;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.
     */
    protocolVersion: z.ZodString;
    capabilities: z.ZodObject<{
        /**
         * Experimental, non-standard capabilities that the server supports.
         */
        experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending log messages to the client.
         */
        logging: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending completions to the client.
         */
        completions: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any prompt templates.
         */
        prompts: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any resources to read.
         */
        resources: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any tools to call.
         */
        tools: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * Experimental, non-standard capabilities that the server supports.
         */
        experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending log messages to the client.
         */
        logging: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending completions to the client.
         */
        completions: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any prompt templates.
         */
        prompts: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any resources to read.
         */
        resources: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any tools to call.
         */
        tools: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * Experimental, non-standard capabilities that the server supports.
         */
        experimental: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending log messages to the client.
         */
        logging: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server supports sending completions to the client.
         */
        completions: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any prompt templates.
         */
        prompts: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the prompt list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any resources to read.
         */
        resources: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports clients subscribing to resource updates.
             */
            subscribe: z.ZodOptional<z.ZodBoolean>;
            /**
             * Whether this server supports issuing notifications for changes to the resource list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Present if the server offers any tools to call.
         */
        tools: z.ZodOptional<z.ZodObject<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * Whether this server supports issuing notifications for changes to the tool list.
             */
            listChanged: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>;
    serverInfo: z.ZodObject<{
        name: z.ZodString;
        version: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        name: z.ZodString;
        version: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        name: z.ZodString;
        version: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>;
    /**
     * Instructions describing how to use the server and its features.
     *
     * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a "hint" to the model. For example, this information MAY be added to the system prompt.
     */
    instructions: z.ZodOptional<z.ZodString>;
}>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    completion: z.ZodObject<{
        /**
         * An array of completion values. Must not exceed 100 items.
         */
        values: z.ZodArray<z.ZodString, "many">;
        /**
         * The total number of completion options available. This can exceed the number of values actually sent in the response.
         */
        total: z.ZodOptional<z.ZodNumber>;
        /**
         * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
         */
        hasMore: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * An array of completion values. Must not exceed 100 items.
         */
        values: z.ZodArray<z.ZodString, "many">;
        /**
         * The total number of completion options available. This can exceed the number of values actually sent in the response.
         */
        total: z.ZodOptional<z.ZodNumber>;
        /**
         * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
         */
        hasMore: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * An array of completion values. Must not exceed 100 items.
         */
        values: z.ZodArray<z.ZodString, "many">;
        /**
         * The total number of completion options available. This can exceed the number of values actually sent in the response.
         */
        total: z.ZodOptional<z.ZodNumber>;
        /**
         * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
         */
        hasMore: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    completion: z.ZodObject<{
        /**
         * An array of completion values. Must not exceed 100 items.
         */
        values: z.ZodArray<z.ZodString, "many">;
        /**
         * The total number of completion options available. This can exceed the number of values actually sent in the response.
         */
        total: z.ZodOptional<z.ZodNumber>;
        /**
         * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
         */
        hasMore: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * An array of completion values. Must not exceed 100 items.
         */
        values: z.ZodArray<z.ZodString, "many">;
        /**
         * The total number of completion options available. This can exceed the number of values actually sent in the response.
         */
        total: z.ZodOptional<z.ZodNumber>;
        /**
         * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
         */
        hasMore: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * An array of completion values. Must not exceed 100 items.
         */
        values: z.ZodArray<z.ZodString, "many">;
        /**
         * The total number of completion options available. This can exceed the number of values actually sent in the response.
         */
        total: z.ZodOptional<z.ZodNumber>;
        /**
         * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
         */
        hasMore: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    completion: z.ZodObject<{
        /**
         * An array of completion values. Must not exceed 100 items.
         */
        values: z.ZodArray<z.ZodString, "many">;
        /**
         * The total number of completion options available. This can exceed the number of values actually sent in the response.
         */
        total: z.ZodOptional<z.ZodNumber>;
        /**
         * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
         */
        hasMore: z.ZodOptional<z.ZodBoolean>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * An array of completion values. Must not exceed 100 items.
         */
        values: z.ZodArray<z.ZodString, "many">;
        /**
         * The total number of completion options available. This can exceed the number of values actually sent in the response.
         */
        total: z.ZodOptional<z.ZodNumber>;
        /**
         * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
         */
        hasMore: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * An array of completion values. Must not exceed 100 items.
         */
        values: z.ZodArray<z.ZodString, "many">;
        /**
         * The total number of completion options available. This can exceed the number of values actually sent in the response.
         */
        total: z.ZodOptional<z.ZodNumber>;
        /**
         * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.
         */
        hasMore: z.ZodOptional<z.ZodBoolean>;
    }, z.ZodTypeAny, "passthrough">>;
}>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An optional description for the prompt.
     */
    description: z.ZodOptional<z.ZodString>;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An optional description for the prompt.
     */
    description: z.ZodOptional<z.ZodString>;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An optional description for the prompt.
     */
    description: z.ZodOptional<z.ZodString>;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        role: z.ZodEnum<["user", "assistant"]>;
        content: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"text">;
            /**
             * The text content of the message.
             */
            text: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"image">;
            /**
             * The base64-encoded image data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the image. Different providers may support different image types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"audio">;
            /**
             * The base64-encoded audio data.
             */
            data: z.ZodString;
            /**
             * The MIME type of the audio. Different providers may support different audio types.
             */
            mimeType: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"resource">;
            resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
                 */
                text: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
                /**
                 * The URI of this resource.
                 */
                uri: z.ZodString;
                /**
                 * The MIME type of this resource, if known.
                 */
                mimeType: z.ZodOptional<z.ZodString>;
            }, {
                /**
                 * A base64-encoded string representing the binary data of the item.
                 */
                blob: z.ZodString;
            }>, z.ZodTypeAny, "passthrough">>]>;
        }, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    prompts: z.ZodArray<z.ZodObject<{
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * An optional description of what this prompt provides
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A list of arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * An optional description of what this prompt provides
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A list of arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * An optional description of what this prompt provides
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A list of arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    prompts: z.ZodArray<z.ZodObject<{
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * An optional description of what this prompt provides
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A list of arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * An optional description of what this prompt provides
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A list of arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * An optional description of what this prompt provides
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A list of arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    prompts: z.ZodArray<z.ZodObject<{
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * An optional description of what this prompt provides
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A list of arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * An optional description of what this prompt provides
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A list of arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The name of the prompt or prompt template.
         */
        name: z.ZodString;
        /**
         * An optional description of what this prompt provides
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A list of arguments to use for templating the prompt.
         */
        arguments: z.ZodOptional<z.ZodArray<z.ZodObject<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * The name of the argument.
             */
            name: z.ZodString;
            /**
             * A human-readable description of the argument.
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * Whether this argument must be provided.
             */
            required: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>, "many">>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    resources: z.ZodArray<z.ZodObject<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    resources: z.ZodArray<z.ZodObject<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    resources: z.ZodArray<z.ZodObject<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * A human-readable name for this resource.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this resource represents.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    resourceTemplates: z.ZodArray<z.ZodObject<{
        /**
         * A URI template (according to RFC 6570) that can be used to construct resource URIs.
         */
        uriTemplate: z.ZodString;
        /**
         * A human-readable name for the type of resource this template refers to.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this template is for.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * A URI template (according to RFC 6570) that can be used to construct resource URIs.
         */
        uriTemplate: z.ZodString;
        /**
         * A human-readable name for the type of resource this template refers to.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this template is for.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * A URI template (according to RFC 6570) that can be used to construct resource URIs.
         */
        uriTemplate: z.ZodString;
        /**
         * A human-readable name for the type of resource this template refers to.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this template is for.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    resourceTemplates: z.ZodArray<z.ZodObject<{
        /**
         * A URI template (according to RFC 6570) that can be used to construct resource URIs.
         */
        uriTemplate: z.ZodString;
        /**
         * A human-readable name for the type of resource this template refers to.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this template is for.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * A URI template (according to RFC 6570) that can be used to construct resource URIs.
         */
        uriTemplate: z.ZodString;
        /**
         * A human-readable name for the type of resource this template refers to.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this template is for.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * A URI template (according to RFC 6570) that can be used to construct resource URIs.
         */
        uriTemplate: z.ZodString;
        /**
         * A human-readable name for the type of resource this template refers to.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this template is for.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    resourceTemplates: z.ZodArray<z.ZodObject<{
        /**
         * A URI template (according to RFC 6570) that can be used to construct resource URIs.
         */
        uriTemplate: z.ZodString;
        /**
         * A human-readable name for the type of resource this template refers to.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this template is for.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * A URI template (according to RFC 6570) that can be used to construct resource URIs.
         */
        uriTemplate: z.ZodString;
        /**
         * A human-readable name for the type of resource this template refers to.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this template is for.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * A URI template (according to RFC 6570) that can be used to construct resource URIs.
         */
        uriTemplate: z.ZodString;
        /**
         * A human-readable name for the type of resource this template refers to.
         *
         * This can be used by clients to populate UI elements.
         */
        name: z.ZodString;
        /**
         * A description of what this template is for.
         *
         * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a "hint" to the model.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    contents: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>]>, "many">;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    contents: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>]>, "many">;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    contents: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
         */
        text: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        /**
         * The URI of this resource.
         */
        uri: z.ZodString;
        /**
         * The MIME type of this resource, if known.
         */
        mimeType: z.ZodOptional<z.ZodString>;
    }, {
        /**
         * A base64-encoded string representing the binary data of the item.
         */
        blob: z.ZodString;
    }>, z.ZodTypeAny, "passthrough">>]>, "many">;
}>, z.ZodTypeAny, "passthrough">>, z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool does not define an outputSchema, this field MUST be present in the result.
     */
    content: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    /**
     * Structured output must not be provided in an unstructured tool result.
     */
    structuredContent: z.ZodOptional<z.ZodNever>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool does not define an outputSchema, this field MUST be present in the result.
     */
    content: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    /**
     * Structured output must not be provided in an unstructured tool result.
     */
    structuredContent: z.ZodOptional<z.ZodNever>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool does not define an outputSchema, this field MUST be present in the result.
     */
    content: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">;
    /**
     * Structured output must not be provided in an unstructured tool result.
     */
    structuredContent: z.ZodOptional<z.ZodNever>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An object containing structured tool output.
     *
     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.
     */
    structuredContent: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool defines an outputSchema, this field MAY be present in the result.
     *
     * Tools may use this field to provide compatibility with older clients that
     * do not support structured content.
     *
     * Clients that support structured content should ignore this field.
     */
    content: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An object containing structured tool output.
     *
     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.
     */
    structuredContent: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool defines an outputSchema, this field MAY be present in the result.
     *
     * Tools may use this field to provide compatibility with older clients that
     * do not support structured content.
     *
     * Clients that support structured content should ignore this field.
     */
    content: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An object containing structured tool output.
     *
     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.
     */
    structuredContent: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    /**
     * A list of content objects that represent the result of the tool call.
     *
     * If the Tool defines an outputSchema, this field MAY be present in the result.
     *
     * Tools may use this field to provide compatibility with older clients that
     * do not support structured content.
     *
     * Clients that support structured content should ignore this field.
     */
    content: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodObject<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"text">;
        /**
         * The text content of the message.
         */
        text: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"image">;
        /**
         * The base64-encoded image data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the image. Different providers may support different image types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"audio">;
        /**
         * The base64-encoded audio data.
         */
        data: z.ZodString;
        /**
         * The MIME type of the audio. Different providers may support different audio types.
         */
        mimeType: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>, z.ZodObject<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        type: z.ZodLiteral<"resource">;
        resource: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * The text of the item. This must only be set if the item can actually be represented as text (not binary data).
             */
            text: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>, z.ZodObject<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
            /**
             * The URI of this resource.
             */
            uri: z.ZodString;
            /**
             * The MIME type of this resource, if known.
             */
            mimeType: z.ZodOptional<z.ZodString>;
        }, {
            /**
             * A base64-encoded string representing the binary data of the item.
             */
            blob: z.ZodString;
        }>, z.ZodTypeAny, "passthrough">>]>;
    }, z.ZodTypeAny, "passthrough">>]>, "many">>;
    /**
     * Whether the tool call ended in an error.
     *
     * If not set, this is assumed to be false (the call was successful).
     */
    isError: z.ZodOptional<z.ZodBoolean>;
}>, z.ZodTypeAny, "passthrough">>]>, z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    tools: z.ZodArray<z.ZodObject<{
        /**
         * The name of the tool.
         */
        name: z.ZodString;
        /**
         * A human-readable description of the tool.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A JSON Schema object defining the expected parameters for the tool.
         */
        inputSchema: z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>;
        /**
         * An optional JSON Schema object defining the structure of the tool's output.
         *
         * If set, a CallToolResult for this Tool MUST contain a structuredContent field whose contents validate against this schema.
         * If not set, a CallToolResult for this Tool MUST NOT contain a structuredContent field and MUST contain a content field.
         */
        outputSchema: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Optional additional tool information.
         */
        annotations: z.ZodOptional<z.ZodObject<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The name of the tool.
         */
        name: z.ZodString;
        /**
         * A human-readable description of the tool.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A JSON Schema object defining the expected parameters for the tool.
         */
        inputSchema: z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>;
        /**
         * An optional JSON Schema object defining the structure of the tool's output.
         *
         * If set, a CallToolResult for this Tool MUST contain a structuredContent field whose contents validate against this schema.
         * If not set, a CallToolResult for this Tool MUST NOT contain a structuredContent field and MUST contain a content field.
         */
        outputSchema: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Optional additional tool information.
         */
        annotations: z.ZodOptional<z.ZodObject<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The name of the tool.
         */
        name: z.ZodString;
        /**
         * A human-readable description of the tool.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A JSON Schema object defining the expected parameters for the tool.
         */
        inputSchema: z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>;
        /**
         * An optional JSON Schema object defining the structure of the tool's output.
         *
         * If set, a CallToolResult for this Tool MUST contain a structuredContent field whose contents validate against this schema.
         * If not set, a CallToolResult for this Tool MUST NOT contain a structuredContent field and MUST contain a content field.
         */
        outputSchema: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Optional additional tool information.
         */
        annotations: z.ZodOptional<z.ZodObject<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    tools: z.ZodArray<z.ZodObject<{
        /**
         * The name of the tool.
         */
        name: z.ZodString;
        /**
         * A human-readable description of the tool.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A JSON Schema object defining the expected parameters for the tool.
         */
        inputSchema: z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>;
        /**
         * An optional JSON Schema object defining the structure of the tool's output.
         *
         * If set, a CallToolResult for this Tool MUST contain a structuredContent field whose contents validate against this schema.
         * If not set, a CallToolResult for this Tool MUST NOT contain a structuredContent field and MUST contain a content field.
         */
        outputSchema: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Optional additional tool information.
         */
        annotations: z.ZodOptional<z.ZodObject<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The name of the tool.
         */
        name: z.ZodString;
        /**
         * A human-readable description of the tool.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A JSON Schema object defining the expected parameters for the tool.
         */
        inputSchema: z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>;
        /**
         * An optional JSON Schema object defining the structure of the tool's output.
         *
         * If set, a CallToolResult for this Tool MUST contain a structuredContent field whose contents validate against this schema.
         * If not set, a CallToolResult for this Tool MUST NOT contain a structuredContent field and MUST contain a content field.
         */
        outputSchema: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Optional additional tool information.
         */
        annotations: z.ZodOptional<z.ZodObject<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The name of the tool.
         */
        name: z.ZodString;
        /**
         * A human-readable description of the tool.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A JSON Schema object defining the expected parameters for the tool.
         */
        inputSchema: z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>;
        /**
         * An optional JSON Schema object defining the structure of the tool's output.
         *
         * If set, a CallToolResult for this Tool MUST contain a structuredContent field whose contents validate against this schema.
         * If not set, a CallToolResult for this Tool MUST NOT contain a structuredContent field and MUST contain a content field.
         */
        outputSchema: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Optional additional tool information.
         */
        annotations: z.ZodOptional<z.ZodObject<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    /**
     * This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.
     */
    _meta: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
}, {
    /**
     * An opaque token representing the pagination position after the last returned result.
     * If present, there may be more results available.
     */
    nextCursor: z.ZodOptional<z.ZodString>;
}>, {
    tools: z.ZodArray<z.ZodObject<{
        /**
         * The name of the tool.
         */
        name: z.ZodString;
        /**
         * A human-readable description of the tool.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A JSON Schema object defining the expected parameters for the tool.
         */
        inputSchema: z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>;
        /**
         * An optional JSON Schema object defining the structure of the tool's output.
         *
         * If set, a CallToolResult for this Tool MUST contain a structuredContent field whose contents validate against this schema.
         * If not set, a CallToolResult for this Tool MUST NOT contain a structuredContent field and MUST contain a content field.
         */
        outputSchema: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Optional additional tool information.
         */
        annotations: z.ZodOptional<z.ZodObject<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /**
         * The name of the tool.
         */
        name: z.ZodString;
        /**
         * A human-readable description of the tool.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A JSON Schema object defining the expected parameters for the tool.
         */
        inputSchema: z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>;
        /**
         * An optional JSON Schema object defining the structure of the tool's output.
         *
         * If set, a CallToolResult for this Tool MUST contain a structuredContent field whose contents validate against this schema.
         * If not set, a CallToolResult for this Tool MUST NOT contain a structuredContent field and MUST contain a content field.
         */
        outputSchema: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Optional additional tool information.
         */
        annotations: z.ZodOptional<z.ZodObject<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /**
         * The name of the tool.
         */
        name: z.ZodString;
        /**
         * A human-readable description of the tool.
         */
        description: z.ZodOptional<z.ZodString>;
        /**
         * A JSON Schema object defining the expected parameters for the tool.
         */
        inputSchema: z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>;
        /**
         * An optional JSON Schema object defining the structure of the tool's output.
         *
         * If set, a CallToolResult for this Tool MUST contain a structuredContent field whose contents validate against this schema.
         * If not set, a CallToolResult for this Tool MUST NOT contain a structuredContent field and MUST contain a content field.
         */
        outputSchema: z.ZodOptional<z.ZodObject<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            type: z.ZodLiteral<"object">;
            properties: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            required: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, z.ZodTypeAny, "passthrough">>>;
        /**
         * Optional additional tool information.
         */
        annotations: z.ZodOptional<z.ZodObject<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /**
             * A human-readable title for the tool.
             */
            title: z.ZodOptional<z.ZodString>;
            /**
             * If true, the tool does not modify its environment.
             *
             * Default: false
             */
            readOnlyHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, the tool may perform destructive updates to its environment.
             * If false, the tool performs only additive updates.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: true
             */
            destructiveHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, calling the tool repeatedly with the same arguments
             * will have no additional effect on the its environment.
             *
             * (This property is meaningful only when `readOnlyHint == false`)
             *
             * Default: false
             */
            idempotentHint: z.ZodOptional<z.ZodBoolean>;
            /**
             * If true, this tool may interact with an "open world" of external
             * entities. If false, the tool's domain of interaction is closed.
             * For example, the world of a web search tool is open, whereas that
             * of a memory tool is not.
             *
             * Default: true
             */
            openWorldHint: z.ZodOptional<z.ZodBoolean>;
        }, z.ZodTypeAny, "passthrough">>>;
    }, z.ZodTypeAny, "passthrough">>, "many">;
}>, z.ZodTypeAny, "passthrough">>]>;
type Primitive = string | number | boolean | bigint | null | undefined;
type Flatten<T> = T extends Primitive ? T : T extends Array<infer U> ? Array<Flatten<U>> : T extends Set<infer U> ? Set<Flatten<U>> : T extends Map<infer K, infer V> ? Map<Flatten<K>, Flatten<V>> : T extends object ? {
    [K in keyof T]: Flatten<T[K]>;
} : T;
type Infer<Schema extends ZodTypeAny> = Flatten<z.infer<Schema>>;
type Request = Infer<typeof RequestSchema>;
type RequestMeta = Infer<typeof RequestMetaSchema>;
type Notification = Infer<typeof NotificationSchema>;
type Result = Infer<typeof ResultSchema>;
type RequestId = Infer<typeof RequestIdSchema>;
type JSONRPCMessage = Infer<typeof JSONRPCMessageSchema>;
type Implementation = Infer<typeof ImplementationSchema>;
type ClientCapabilities = Infer<typeof ClientCapabilitiesSchema>;
type ServerCapabilities = Infer<typeof ServerCapabilitiesSchema>;
type Progress = Infer<typeof ProgressSchema>;
type Resource = Infer<typeof ResourceSchema>;
type ListResourcesRequest = Infer<typeof ListResourcesRequestSchema>;
type ListResourcesResult = Infer<typeof ListResourcesResultSchema>;
type ListResourceTemplatesRequest = Infer<typeof ListResourceTemplatesRequestSchema>;
type ReadResourceRequest = Infer<typeof ReadResourceRequestSchema>;
type ReadResourceResult = Infer<typeof ReadResourceResultSchema>;
type SubscribeRequest = Infer<typeof SubscribeRequestSchema>;
type UnsubscribeRequest = Infer<typeof UnsubscribeRequestSchema>;
type ResourceUpdatedNotification = Infer<typeof ResourceUpdatedNotificationSchema>;
type ListPromptsRequest = Infer<typeof ListPromptsRequestSchema>;
type GetPromptRequest = Infer<typeof GetPromptRequestSchema>;
type GetPromptResult = Infer<typeof GetPromptResultSchema>;
type ToolAnnotations = Infer<typeof ToolAnnotationsSchema>;
type ListToolsRequest = Infer<typeof ListToolsRequestSchema>;
type CallToolResult = Infer<typeof CallToolResultSchema>;
type CallToolRequest = Infer<typeof CallToolRequestSchema>;
type LoggingLevel = Infer<typeof LoggingLevelSchema>;
type LoggingMessageNotification = Infer<typeof LoggingMessageNotificationSchema>;
type CreateMessageRequest = Infer<typeof CreateMessageRequestSchema>;
type CompleteRequest = Infer<typeof CompleteRequestSchema>;
type ListRootsRequest = Infer<typeof ListRootsRequestSchema>;
type ClientRequest = Infer<typeof ClientRequestSchema>;
type ClientNotification = Infer<typeof ClientNotificationSchema>;
type ClientResult = Infer<typeof ClientResultSchema>;
type ServerRequest = Infer<typeof ServerRequestSchema>;
type ServerNotification = Infer<typeof ServerNotificationSchema>;
type ServerResult = Infer<typeof ServerResultSchema>;

/**
 * Information about a validated access token, provided to request handlers.
 */
interface AuthInfo {
    /**
     * The access token.
     */
    token: string;
    /**
     * The client ID associated with this token.
     */
    clientId: string;
    /**
     * Scopes associated with this token.
     */
    scopes: string[];
    /**
     * When the token expires (in seconds since epoch).
     */
    expiresAt?: number;
    /**
     * Additional data associated with the token.
     * This field should be used for any additional data that needs to be attached to the auth info.
    */
    extra?: Record<string, unknown>;
}

/**
 * Options for sending a JSON-RPC message.
 */
type TransportSendOptions = {
    /**
     * If present, `relatedRequestId` is used to indicate to the transport which incoming request to associate this outgoing message with.
     */
    relatedRequestId?: RequestId;
    /**
     * The resumption token used to continue long-running requests that were interrupted.
     *
     * This allows clients to reconnect and continue from where they left off, if supported by the transport.
     */
    resumptionToken?: string;
    /**
     * A callback that is invoked when the resumption token changes, if supported by the transport.
     *
     * This allows clients to persist the latest token for potential reconnection.
     */
    onresumptiontoken?: (token: string) => void;
};
/**
 * Describes the minimal contract for a MCP transport that a client or server can communicate over.
 */
interface Transport {
    /**
     * Starts processing messages on the transport, including any connection steps that might need to be taken.
     *
     * This method should only be called after callbacks are installed, or else messages may be lost.
     *
     * NOTE: This method should not be called explicitly when using Client, Server, or Protocol classes, as they will implicitly call start().
     */
    start(): Promise<void>;
    /**
     * Sends a JSON-RPC message (request or response).
     *
     * If present, `relatedRequestId` is used to indicate to the transport which incoming request to associate this outgoing message with.
     */
    send(message: JSONRPCMessage, options?: TransportSendOptions): Promise<void>;
    /**
     * Closes the connection.
     */
    close(): Promise<void>;
    /**
     * Callback for when the connection is closed for any reason.
     *
     * This should be invoked when close() is called as well.
     */
    onclose?: () => void;
    /**
     * Callback for when an error occurs.
     *
     * Note that errors are not necessarily fatal; they are used for reporting any kind of exceptional condition out of band.
     */
    onerror?: (error: Error) => void;
    /**
     * Callback for when a message (request or response) is received over the connection.
     *
     * Includes the authInfo if the transport is authenticated.
     *
     */
    onmessage?: (message: JSONRPCMessage, extra?: {
        authInfo?: AuthInfo;
    }) => void;
    /**
     * The session ID generated for this connection.
     */
    sessionId?: string;
}

/**
 * Callback for progress notifications.
 */
type ProgressCallback = (progress: Progress) => void;
/**
 * Additional initialization options.
 */
type ProtocolOptions = {
    /**
     * Whether to restrict emitted requests to only those that the remote side has indicated that they can handle, through their advertised capabilities.
     *
     * Note that this DOES NOT affect checking of _local_ side capabilities, as it is considered a logic error to mis-specify those.
     *
     * Currently this defaults to false, for backwards compatibility with SDK versions that did not advertise capabilities correctly. In future, this will default to true.
     */
    enforceStrictCapabilities?: boolean;
};
/**
 * Options that can be given per request.
 */
type RequestOptions = {
    /**
     * If set, requests progress notifications from the remote end (if supported). When progress notifications are received, this callback will be invoked.
     */
    onprogress?: ProgressCallback;
    /**
     * Can be used to cancel an in-flight request. This will cause an AbortError to be raised from request().
     */
    signal?: AbortSignal;
    /**
     * A timeout (in milliseconds) for this request. If exceeded, an McpError with code `RequestTimeout` will be raised from request().
     *
     * If not specified, `DEFAULT_REQUEST_TIMEOUT_MSEC` will be used as the timeout.
     */
    timeout?: number;
    /**
     * If true, receiving a progress notification will reset the request timeout.
     * This is useful for long-running operations that send periodic progress updates.
     * Default: false
     */
    resetTimeoutOnProgress?: boolean;
    /**
     * Maximum total time (in milliseconds) to wait for a response.
     * If exceeded, an McpError with code `RequestTimeout` will be raised, regardless of progress notifications.
     * If not specified, there is no maximum total timeout.
     */
    maxTotalTimeout?: number;
} & TransportSendOptions;
/**
 * Options that can be given per notification.
 */
type NotificationOptions = {
    /**
     * May be used to indicate to the transport which incoming request to associate this outgoing notification with.
     */
    relatedRequestId?: RequestId;
};
/**
 * Extra data given to request handlers.
 */
type RequestHandlerExtra<SendRequestT extends Request, SendNotificationT extends Notification> = {
    /**
     * An abort signal used to communicate if the request was cancelled from the sender's side.
     */
    signal: AbortSignal;
    /**
     * Information about a validated access token, provided to request handlers.
     */
    authInfo?: AuthInfo;
    /**
     * The session ID from the transport, if available.
     */
    sessionId?: string;
    /**
     * Metadata from the original request.
     */
    _meta?: RequestMeta;
    /**
     * The JSON-RPC ID of the request being handled.
     * This can be useful for tracking or logging purposes.
     */
    requestId: RequestId;
    /**
     * Sends a notification that relates to the current request being handled.
     *
     * This is used by certain transports to correctly associate related messages.
     */
    sendNotification: (notification: SendNotificationT) => Promise<void>;
    /**
     * Sends a request that relates to the current request being handled.
     *
     * This is used by certain transports to correctly associate related messages.
     */
    sendRequest: <U extends ZodType<object>>(request: SendRequestT, resultSchema: U, options?: RequestOptions) => Promise<z.infer<U>>;
};
/**
 * Implements MCP protocol framing on top of a pluggable transport, including
 * features like request/response linking, notifications, and progress.
 */
declare abstract class Protocol<SendRequestT extends Request, SendNotificationT extends Notification, SendResultT extends Result> {
    private _options?;
    private _transport?;
    private _requestMessageId;
    private _requestHandlers;
    private _requestHandlerAbortControllers;
    private _notificationHandlers;
    private _responseHandlers;
    private _progressHandlers;
    private _timeoutInfo;
    /**
     * Callback for when the connection is closed for any reason.
     *
     * This is invoked when close() is called as well.
     */
    onclose?: () => void;
    /**
     * Callback for when an error occurs.
     *
     * Note that errors are not necessarily fatal; they are used for reporting any kind of exceptional condition out of band.
     */
    onerror?: (error: Error) => void;
    /**
     * A handler to invoke for any request types that do not have their own handler installed.
     */
    fallbackRequestHandler?: (request: Request) => Promise<SendResultT>;
    /**
     * A handler to invoke for any notification types that do not have their own handler installed.
     */
    fallbackNotificationHandler?: (notification: Notification) => Promise<void>;
    constructor(_options?: ProtocolOptions | undefined);
    private _setupTimeout;
    private _resetTimeout;
    private _cleanupTimeout;
    /**
     * Attaches to the given transport, starts it, and starts listening for messages.
     *
     * The Protocol object assumes ownership of the Transport, replacing any callbacks that have already been set, and expects that it is the only user of the Transport instance going forward.
     */
    connect(transport: Transport): Promise<void>;
    private _onclose;
    private _onerror;
    private _onnotification;
    private _onrequest;
    private _onprogress;
    private _onresponse;
    get transport(): Transport | undefined;
    /**
     * Closes the connection.
     */
    close(): Promise<void>;
    /**
     * A method to check if a capability is supported by the remote side, for the given method to be called.
     *
     * This should be implemented by subclasses.
     */
    protected abstract assertCapabilityForMethod(method: SendRequestT["method"]): void;
    /**
     * A method to check if a notification is supported by the local side, for the given method to be sent.
     *
     * This should be implemented by subclasses.
     */
    protected abstract assertNotificationCapability(method: SendNotificationT["method"]): void;
    /**
     * A method to check if a request handler is supported by the local side, for the given method to be handled.
     *
     * This should be implemented by subclasses.
     */
    protected abstract assertRequestHandlerCapability(method: string): void;
    /**
     * Sends a request and wait for a response.
     *
     * Do not use this method to emit notifications! Use notification() instead.
     */
    request<T extends ZodType<object>>(request: SendRequestT, resultSchema: T, options?: RequestOptions): Promise<z.infer<T>>;
    /**
     * Emits a notification, which is a one-way message that does not expect a response.
     */
    notification(notification: SendNotificationT, options?: NotificationOptions): Promise<void>;
    /**
     * Registers a handler to invoke when this protocol object receives a request with the given method.
     *
     * Note that this will replace any previous request handler for the same method.
     */
    setRequestHandler<T extends ZodObject<{
        method: ZodLiteral<string>;
    }>>(requestSchema: T, handler: (request: z.infer<T>, extra: RequestHandlerExtra<SendRequestT, SendNotificationT>) => SendResultT | Promise<SendResultT>): void;
    /**
     * Removes the request handler for the given method.
     */
    removeRequestHandler(method: string): void;
    /**
     * Asserts that a request handler has not already been set for the given method, in preparation for a new one being automatically installed.
     */
    assertCanSetRequestHandler(method: string): void;
    /**
     * Registers a handler to invoke when this protocol object receives a notification with the given method.
     *
     * Note that this will replace any previous notification handler for the same method.
     */
    setNotificationHandler<T extends ZodObject<{
        method: ZodLiteral<string>;
    }>>(notificationSchema: T, handler: (notification: z.infer<T>) => void | Promise<void>): void;
    /**
     * Removes the notification handler for the given method.
     */
    removeNotificationHandler(method: string): void;
}

type ClientOptions = ProtocolOptions & {
    /**
     * Capabilities to advertise as being supported by this client.
     */
    capabilities?: ClientCapabilities;
};
/**
 * An MCP client on top of a pluggable transport.
 *
 * The client will automatically begin the initialization flow with the server when connect() is called.
 *
 * To use with custom types, extend the base Request/Notification/Result types and pass them as type parameters:
 *
 * ```typescript
 * // Custom schemas
 * const CustomRequestSchema = RequestSchema.extend({...})
 * const CustomNotificationSchema = NotificationSchema.extend({...})
 * const CustomResultSchema = ResultSchema.extend({...})
 *
 * // Type aliases
 * type CustomRequest = z.infer<typeof CustomRequestSchema>
 * type CustomNotification = z.infer<typeof CustomNotificationSchema>
 * type CustomResult = z.infer<typeof CustomResultSchema>
 *
 * // Create typed client
 * const client = new Client<CustomRequest, CustomNotification, CustomResult>({
 *   name: "CustomClient",
 *   version: "1.0.0"
 * })
 * ```
 */
declare class Client<RequestT extends Request = Request, NotificationT extends Notification = Notification, ResultT extends Result = Result> extends Protocol<ClientRequest | RequestT, ClientNotification | NotificationT, ClientResult | ResultT> {
    private _clientInfo;
    private _serverCapabilities?;
    private _serverVersion?;
    private _capabilities;
    private _instructions?;
    private _cachedToolOutputValidators;
    private _ajv;
    /**
     * Initializes this client with the given name and version information.
     */
    constructor(_clientInfo: Implementation, options?: ClientOptions);
    /**
     * Registers new capabilities. This can only be called before connecting to a transport.
     *
     * The new capabilities will be merged with any existing capabilities previously given (e.g., at initialization).
     */
    registerCapabilities(capabilities: ClientCapabilities): void;
    protected assertCapability(capability: keyof ServerCapabilities, method: string): void;
    connect(transport: Transport, options?: RequestOptions): Promise<void>;
    /**
     * After initialization has completed, this will be populated with the server's reported capabilities.
     */
    getServerCapabilities(): ServerCapabilities | undefined;
    /**
     * After initialization has completed, this will be populated with information about the server's name and version.
     */
    getServerVersion(): Implementation | undefined;
    /**
     * After initialization has completed, this may be populated with information about the server's instructions.
     */
    getInstructions(): string | undefined;
    protected assertCapabilityForMethod(method: RequestT["method"]): void;
    protected assertNotificationCapability(method: NotificationT["method"]): void;
    protected assertRequestHandlerCapability(method: string): void;
    ping(options?: RequestOptions): Promise<{
        _meta?: zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough"> | undefined;
    }>;
    complete(params: CompleteRequest["params"], options?: RequestOptions): Promise<zod.objectOutputType<zod.objectUtil.extendShape<{
        _meta: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
    }, {
        completion: zod.ZodObject<{
            values: zod.ZodArray<zod.ZodString, "many">;
            total: zod.ZodOptional<zod.ZodNumber>;
            hasMore: zod.ZodOptional<zod.ZodBoolean>;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            values: zod.ZodArray<zod.ZodString, "many">;
            total: zod.ZodOptional<zod.ZodNumber>;
            hasMore: zod.ZodOptional<zod.ZodBoolean>;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            values: zod.ZodArray<zod.ZodString, "many">;
            total: zod.ZodOptional<zod.ZodNumber>;
            hasMore: zod.ZodOptional<zod.ZodBoolean>;
        }, zod.ZodTypeAny, "passthrough">>;
    }>, zod.ZodTypeAny, "passthrough">>;
    setLoggingLevel(level: LoggingLevel, options?: RequestOptions): Promise<{
        _meta?: zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough"> | undefined;
    }>;
    getPrompt(params: GetPromptRequest["params"], options?: RequestOptions): Promise<zod.objectOutputType<zod.objectUtil.extendShape<{
        _meta: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
    }, {
        description: zod.ZodOptional<zod.ZodString>;
        messages: zod.ZodArray<zod.ZodObject<{
            role: zod.ZodEnum<["user", "assistant"]>;
            content: zod.ZodUnion<[zod.ZodObject<{
                type: zod.ZodLiteral<"text">;
                text: zod.ZodString;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"text">;
                text: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"text">;
                text: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
                type: zod.ZodLiteral<"image">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"image">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"image">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
                type: zod.ZodLiteral<"audio">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"audio">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"audio">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
                type: zod.ZodLiteral<"resource">;
                resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>]>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"resource">;
                resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>]>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"resource">;
                resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>]>;
            }, zod.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            role: zod.ZodEnum<["user", "assistant"]>;
            content: zod.ZodUnion<[zod.ZodObject<{
                type: zod.ZodLiteral<"text">;
                text: zod.ZodString;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"text">;
                text: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"text">;
                text: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
                type: zod.ZodLiteral<"image">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"image">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"image">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
                type: zod.ZodLiteral<"audio">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"audio">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"audio">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
                type: zod.ZodLiteral<"resource">;
                resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>]>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"resource">;
                resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>]>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"resource">;
                resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>]>;
            }, zod.ZodTypeAny, "passthrough">>]>;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            role: zod.ZodEnum<["user", "assistant"]>;
            content: zod.ZodUnion<[zod.ZodObject<{
                type: zod.ZodLiteral<"text">;
                text: zod.ZodString;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"text">;
                text: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"text">;
                text: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
                type: zod.ZodLiteral<"image">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"image">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"image">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
                type: zod.ZodLiteral<"audio">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"audio">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"audio">;
                data: zod.ZodString;
                mimeType: zod.ZodString;
            }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
                type: zod.ZodLiteral<"resource">;
                resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>]>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"resource">;
                resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>]>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"resource">;
                resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    text: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                    uri: zod.ZodString;
                    mimeType: zod.ZodOptional<zod.ZodString>;
                }, {
                    blob: zod.ZodString;
                }>, zod.ZodTypeAny, "passthrough">>]>;
            }, zod.ZodTypeAny, "passthrough">>]>;
        }, zod.ZodTypeAny, "passthrough">>, "many">;
    }>, zod.ZodTypeAny, "passthrough">>;
    listPrompts(params?: ListPromptsRequest["params"], options?: RequestOptions): Promise<zod.objectOutputType<zod.objectUtil.extendShape<zod.objectUtil.extendShape<{
        _meta: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
    }, {
        nextCursor: zod.ZodOptional<zod.ZodString>;
    }>, {
        prompts: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            description: zod.ZodOptional<zod.ZodString>;
            arguments: zod.ZodOptional<zod.ZodArray<zod.ZodObject<{
                name: zod.ZodString;
                description: zod.ZodOptional<zod.ZodString>;
                required: zod.ZodOptional<zod.ZodBoolean>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                name: zod.ZodString;
                description: zod.ZodOptional<zod.ZodString>;
                required: zod.ZodOptional<zod.ZodBoolean>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                name: zod.ZodString;
                description: zod.ZodOptional<zod.ZodString>;
                required: zod.ZodOptional<zod.ZodBoolean>;
            }, zod.ZodTypeAny, "passthrough">>, "many">>;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            name: zod.ZodString;
            description: zod.ZodOptional<zod.ZodString>;
            arguments: zod.ZodOptional<zod.ZodArray<zod.ZodObject<{
                name: zod.ZodString;
                description: zod.ZodOptional<zod.ZodString>;
                required: zod.ZodOptional<zod.ZodBoolean>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                name: zod.ZodString;
                description: zod.ZodOptional<zod.ZodString>;
                required: zod.ZodOptional<zod.ZodBoolean>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                name: zod.ZodString;
                description: zod.ZodOptional<zod.ZodString>;
                required: zod.ZodOptional<zod.ZodBoolean>;
            }, zod.ZodTypeAny, "passthrough">>, "many">>;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            name: zod.ZodString;
            description: zod.ZodOptional<zod.ZodString>;
            arguments: zod.ZodOptional<zod.ZodArray<zod.ZodObject<{
                name: zod.ZodString;
                description: zod.ZodOptional<zod.ZodString>;
                required: zod.ZodOptional<zod.ZodBoolean>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                name: zod.ZodString;
                description: zod.ZodOptional<zod.ZodString>;
                required: zod.ZodOptional<zod.ZodBoolean>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                name: zod.ZodString;
                description: zod.ZodOptional<zod.ZodString>;
                required: zod.ZodOptional<zod.ZodBoolean>;
            }, zod.ZodTypeAny, "passthrough">>, "many">>;
        }, zod.ZodTypeAny, "passthrough">>, "many">;
    }>, zod.ZodTypeAny, "passthrough">>;
    listResources(params?: ListResourcesRequest["params"], options?: RequestOptions): Promise<zod.objectOutputType<zod.objectUtil.extendShape<zod.objectUtil.extendShape<{
        _meta: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
    }, {
        nextCursor: zod.ZodOptional<zod.ZodString>;
    }>, {
        resources: zod.ZodArray<zod.ZodObject<{
            uri: zod.ZodString;
            name: zod.ZodString;
            description: zod.ZodOptional<zod.ZodString>;
            mimeType: zod.ZodOptional<zod.ZodString>;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            uri: zod.ZodString;
            name: zod.ZodString;
            description: zod.ZodOptional<zod.ZodString>;
            mimeType: zod.ZodOptional<zod.ZodString>;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            uri: zod.ZodString;
            name: zod.ZodString;
            description: zod.ZodOptional<zod.ZodString>;
            mimeType: zod.ZodOptional<zod.ZodString>;
        }, zod.ZodTypeAny, "passthrough">>, "many">;
    }>, zod.ZodTypeAny, "passthrough">>;
    listResourceTemplates(params?: ListResourceTemplatesRequest["params"], options?: RequestOptions): Promise<zod.objectOutputType<zod.objectUtil.extendShape<zod.objectUtil.extendShape<{
        _meta: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
    }, {
        nextCursor: zod.ZodOptional<zod.ZodString>;
    }>, {
        resourceTemplates: zod.ZodArray<zod.ZodObject<{
            uriTemplate: zod.ZodString;
            name: zod.ZodString;
            description: zod.ZodOptional<zod.ZodString>;
            mimeType: zod.ZodOptional<zod.ZodString>;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            uriTemplate: zod.ZodString;
            name: zod.ZodString;
            description: zod.ZodOptional<zod.ZodString>;
            mimeType: zod.ZodOptional<zod.ZodString>;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            uriTemplate: zod.ZodString;
            name: zod.ZodString;
            description: zod.ZodOptional<zod.ZodString>;
            mimeType: zod.ZodOptional<zod.ZodString>;
        }, zod.ZodTypeAny, "passthrough">>, "many">;
    }>, zod.ZodTypeAny, "passthrough">>;
    readResource(params: ReadResourceRequest["params"], options?: RequestOptions): Promise<zod.objectOutputType<zod.objectUtil.extendShape<{
        _meta: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
    }, {
        contents: zod.ZodArray<zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
            uri: zod.ZodString;
            mimeType: zod.ZodOptional<zod.ZodString>;
        }, {
            text: zod.ZodString;
        }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
            uri: zod.ZodString;
            mimeType: zod.ZodOptional<zod.ZodString>;
        }, {
            text: zod.ZodString;
        }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
            uri: zod.ZodString;
            mimeType: zod.ZodOptional<zod.ZodString>;
        }, {
            text: zod.ZodString;
        }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
            uri: zod.ZodString;
            mimeType: zod.ZodOptional<zod.ZodString>;
        }, {
            blob: zod.ZodString;
        }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
            uri: zod.ZodString;
            mimeType: zod.ZodOptional<zod.ZodString>;
        }, {
            blob: zod.ZodString;
        }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
            uri: zod.ZodString;
            mimeType: zod.ZodOptional<zod.ZodString>;
        }, {
            blob: zod.ZodString;
        }>, zod.ZodTypeAny, "passthrough">>]>, "many">;
    }>, zod.ZodTypeAny, "passthrough">>;
    subscribeResource(params: SubscribeRequest["params"], options?: RequestOptions): Promise<{
        _meta?: zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough"> | undefined;
    }>;
    unsubscribeResource(params: UnsubscribeRequest["params"], options?: RequestOptions): Promise<{
        _meta?: zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough"> | undefined;
    }>;
    callTool(params: CallToolRequest["params"], resultSchema?: typeof CallToolResultSchema | typeof CompatibilityCallToolResultSchema, options?: RequestOptions): Promise<zod.objectOutputType<zod.objectUtil.extendShape<{
        _meta: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
    }, {
        content: zod.ZodArray<zod.ZodUnion<[zod.ZodObject<{
            type: zod.ZodLiteral<"text">;
            text: zod.ZodString;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            type: zod.ZodLiteral<"text">;
            text: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            type: zod.ZodLiteral<"text">;
            text: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
            type: zod.ZodLiteral<"image">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            type: zod.ZodLiteral<"image">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            type: zod.ZodLiteral<"image">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
            type: zod.ZodLiteral<"audio">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            type: zod.ZodLiteral<"audio">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            type: zod.ZodLiteral<"audio">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
            type: zod.ZodLiteral<"resource">;
            resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            type: zod.ZodLiteral<"resource">;
            resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">>]>;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            type: zod.ZodLiteral<"resource">;
            resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">>]>;
        }, zod.ZodTypeAny, "passthrough">>]>, "many">;
        structuredContent: zod.ZodOptional<zod.ZodNever>;
        isError: zod.ZodOptional<zod.ZodBoolean>;
    }>, zod.ZodTypeAny, "passthrough"> | zod.objectOutputType<zod.objectUtil.extendShape<{
        _meta: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
    }, {
        structuredContent: zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>;
        content: zod.ZodOptional<zod.ZodArray<zod.ZodUnion<[zod.ZodObject<{
            type: zod.ZodLiteral<"text">;
            text: zod.ZodString;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            type: zod.ZodLiteral<"text">;
            text: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            type: zod.ZodLiteral<"text">;
            text: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
            type: zod.ZodLiteral<"image">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            type: zod.ZodLiteral<"image">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            type: zod.ZodLiteral<"image">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
            type: zod.ZodLiteral<"audio">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            type: zod.ZodLiteral<"audio">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            type: zod.ZodLiteral<"audio">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
            type: zod.ZodLiteral<"resource">;
            resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">>]>;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            type: zod.ZodLiteral<"resource">;
            resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">>]>;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            type: zod.ZodLiteral<"resource">;
            resource: zod.ZodUnion<[zod.ZodObject<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                text: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, "passthrough", zod.ZodTypeAny, zod.objectOutputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">, zod.objectInputType<zod.objectUtil.extendShape<{
                uri: zod.ZodString;
                mimeType: zod.ZodOptional<zod.ZodString>;
            }, {
                blob: zod.ZodString;
            }>, zod.ZodTypeAny, "passthrough">>]>;
        }, zod.ZodTypeAny, "passthrough">>]>, "many">>;
        isError: zod.ZodOptional<zod.ZodBoolean>;
    }>, zod.ZodTypeAny, "passthrough"> | zod.objectOutputType<zod.objectUtil.extendShape<{
        _meta: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
    }, {
        toolResult: zod.ZodUnknown;
    }>, zod.ZodTypeAny, "passthrough">>;
    private cacheToolOutputSchemas;
    private getToolOutputValidator;
    listTools(params?: ListToolsRequest["params"], options?: RequestOptions): Promise<zod.objectOutputType<zod.objectUtil.extendShape<zod.objectUtil.extendShape<{
        _meta: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
    }, {
        nextCursor: zod.ZodOptional<zod.ZodString>;
    }>, {
        tools: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            description: zod.ZodOptional<zod.ZodString>;
            inputSchema: zod.ZodObject<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, zod.ZodTypeAny, "passthrough">>;
            outputSchema: zod.ZodOptional<zod.ZodObject<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, zod.ZodTypeAny, "passthrough">>>;
            annotations: zod.ZodOptional<zod.ZodObject<{
                title: zod.ZodOptional<zod.ZodString>;
                readOnlyHint: zod.ZodOptional<zod.ZodBoolean>;
                destructiveHint: zod.ZodOptional<zod.ZodBoolean>;
                idempotentHint: zod.ZodOptional<zod.ZodBoolean>;
                openWorldHint: zod.ZodOptional<zod.ZodBoolean>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                title: zod.ZodOptional<zod.ZodString>;
                readOnlyHint: zod.ZodOptional<zod.ZodBoolean>;
                destructiveHint: zod.ZodOptional<zod.ZodBoolean>;
                idempotentHint: zod.ZodOptional<zod.ZodBoolean>;
                openWorldHint: zod.ZodOptional<zod.ZodBoolean>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                title: zod.ZodOptional<zod.ZodString>;
                readOnlyHint: zod.ZodOptional<zod.ZodBoolean>;
                destructiveHint: zod.ZodOptional<zod.ZodBoolean>;
                idempotentHint: zod.ZodOptional<zod.ZodBoolean>;
                openWorldHint: zod.ZodOptional<zod.ZodBoolean>;
            }, zod.ZodTypeAny, "passthrough">>>;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            name: zod.ZodString;
            description: zod.ZodOptional<zod.ZodString>;
            inputSchema: zod.ZodObject<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, zod.ZodTypeAny, "passthrough">>;
            outputSchema: zod.ZodOptional<zod.ZodObject<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, zod.ZodTypeAny, "passthrough">>>;
            annotations: zod.ZodOptional<zod.ZodObject<{
                title: zod.ZodOptional<zod.ZodString>;
                readOnlyHint: zod.ZodOptional<zod.ZodBoolean>;
                destructiveHint: zod.ZodOptional<zod.ZodBoolean>;
                idempotentHint: zod.ZodOptional<zod.ZodBoolean>;
                openWorldHint: zod.ZodOptional<zod.ZodBoolean>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                title: zod.ZodOptional<zod.ZodString>;
                readOnlyHint: zod.ZodOptional<zod.ZodBoolean>;
                destructiveHint: zod.ZodOptional<zod.ZodBoolean>;
                idempotentHint: zod.ZodOptional<zod.ZodBoolean>;
                openWorldHint: zod.ZodOptional<zod.ZodBoolean>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                title: zod.ZodOptional<zod.ZodString>;
                readOnlyHint: zod.ZodOptional<zod.ZodBoolean>;
                destructiveHint: zod.ZodOptional<zod.ZodBoolean>;
                idempotentHint: zod.ZodOptional<zod.ZodBoolean>;
                openWorldHint: zod.ZodOptional<zod.ZodBoolean>;
            }, zod.ZodTypeAny, "passthrough">>>;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            name: zod.ZodString;
            description: zod.ZodOptional<zod.ZodString>;
            inputSchema: zod.ZodObject<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, zod.ZodTypeAny, "passthrough">>;
            outputSchema: zod.ZodOptional<zod.ZodObject<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                type: zod.ZodLiteral<"object">;
                properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
                required: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, zod.ZodTypeAny, "passthrough">>>;
            annotations: zod.ZodOptional<zod.ZodObject<{
                title: zod.ZodOptional<zod.ZodString>;
                readOnlyHint: zod.ZodOptional<zod.ZodBoolean>;
                destructiveHint: zod.ZodOptional<zod.ZodBoolean>;
                idempotentHint: zod.ZodOptional<zod.ZodBoolean>;
                openWorldHint: zod.ZodOptional<zod.ZodBoolean>;
            }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
                title: zod.ZodOptional<zod.ZodString>;
                readOnlyHint: zod.ZodOptional<zod.ZodBoolean>;
                destructiveHint: zod.ZodOptional<zod.ZodBoolean>;
                idempotentHint: zod.ZodOptional<zod.ZodBoolean>;
                openWorldHint: zod.ZodOptional<zod.ZodBoolean>;
            }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
                title: zod.ZodOptional<zod.ZodString>;
                readOnlyHint: zod.ZodOptional<zod.ZodBoolean>;
                destructiveHint: zod.ZodOptional<zod.ZodBoolean>;
                idempotentHint: zod.ZodOptional<zod.ZodBoolean>;
                openWorldHint: zod.ZodOptional<zod.ZodBoolean>;
            }, zod.ZodTypeAny, "passthrough">>>;
        }, zod.ZodTypeAny, "passthrough">>, "many">;
    }>, zod.ZodTypeAny, "passthrough">>;
    sendRootsListChanged(): Promise<void>;
}

/**
 * Launches the Gestell MCP client over stdio by spawning a Node.js process.
 *
 * @param entrypoint - Filesystem path to the compiled MCP server entrypoint script.
 *                      Defaults to the `dist/entry.js` file relative to this module.
 * @returns A Promise that resolves to a connected MCP `Client` instance ready to issue tool calls.
 */
declare function startTerminalClient(entrypoint?: string): Promise<Client<{
    method: string;
    params?: {
        [x: string]: unknown;
        _meta?: {
            [x: string]: unknown;
            progressToken?: string | number | undefined;
        } | undefined;
    } | undefined;
}, {
    method: string;
    params?: {
        [x: string]: unknown;
        _meta?: {
            [x: string]: unknown;
        } | undefined;
    } | undefined;
}, {
    [x: string]: unknown;
    _meta?: {
        [x: string]: unknown;
    } | undefined;
}>>;

/**
 * Invokes a tool on the given MCP client and returns its result.
 *
 * @template T - The expected type of the parsed result.
 * @param client - An initialized MCP Client instance.
 * @param name - The name of the tool to call.
 * @param args - A record of arguments to pass to the tool.
 * @returns A promise that resolves to the tool’s output parsed as type T, or the raw text if JSON parsing fails.
 * @throws If the tool invocation returns an error, or if the response is empty.
 */
declare function runTool<T>(client: Client, name: string, args: Record<string, unknown>): Promise<T>;

type ServerOptions = ProtocolOptions & {
    /**
     * Capabilities to advertise as being supported by this server.
     */
    capabilities?: ServerCapabilities;
    /**
     * Optional instructions describing how to use the server and its features.
     */
    instructions?: string;
};
/**
 * An MCP server on top of a pluggable transport.
 *
 * This server will automatically respond to the initialization flow as initiated from the client.
 *
 * To use with custom types, extend the base Request/Notification/Result types and pass them as type parameters:
 *
 * ```typescript
 * // Custom schemas
 * const CustomRequestSchema = RequestSchema.extend({...})
 * const CustomNotificationSchema = NotificationSchema.extend({...})
 * const CustomResultSchema = ResultSchema.extend({...})
 *
 * // Type aliases
 * type CustomRequest = z.infer<typeof CustomRequestSchema>
 * type CustomNotification = z.infer<typeof CustomNotificationSchema>
 * type CustomResult = z.infer<typeof CustomResultSchema>
 *
 * // Create typed server
 * const server = new Server<CustomRequest, CustomNotification, CustomResult>({
 *   name: "CustomServer",
 *   version: "1.0.0"
 * })
 * ```
 */
declare class Server<RequestT extends Request = Request, NotificationT extends Notification = Notification, ResultT extends Result = Result> extends Protocol<ServerRequest | RequestT, ServerNotification | NotificationT, ServerResult | ResultT> {
    private _serverInfo;
    private _clientCapabilities?;
    private _clientVersion?;
    private _capabilities;
    private _instructions?;
    /**
     * Callback for when initialization has fully completed (i.e., the client has sent an `initialized` notification).
     */
    oninitialized?: () => void;
    /**
     * Initializes this server with the given name and version information.
     */
    constructor(_serverInfo: Implementation, options?: ServerOptions);
    /**
     * Registers new capabilities. This can only be called before connecting to a transport.
     *
     * The new capabilities will be merged with any existing capabilities previously given (e.g., at initialization).
     */
    registerCapabilities(capabilities: ServerCapabilities): void;
    protected assertCapabilityForMethod(method: RequestT["method"]): void;
    protected assertNotificationCapability(method: (ServerNotification | NotificationT)["method"]): void;
    protected assertRequestHandlerCapability(method: string): void;
    private _oninitialize;
    /**
     * After initialization has completed, this will be populated with the client's reported capabilities.
     */
    getClientCapabilities(): ClientCapabilities | undefined;
    /**
     * After initialization has completed, this will be populated with information about the client's name and version.
     */
    getClientVersion(): Implementation | undefined;
    private getCapabilities;
    ping(): Promise<{
        _meta?: zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough"> | undefined;
    }>;
    createMessage(params: CreateMessageRequest["params"], options?: RequestOptions): Promise<zod.objectOutputType<zod.objectUtil.extendShape<{
        _meta: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
    }, {
        model: zod.ZodString;
        stopReason: zod.ZodOptional<zod.ZodUnion<[zod.ZodEnum<["endTurn", "stopSequence", "maxTokens"]>, zod.ZodString]>>;
        role: zod.ZodEnum<["user", "assistant"]>;
        content: zod.ZodDiscriminatedUnion<"type", [zod.ZodObject<{
            type: zod.ZodLiteral<"text">;
            text: zod.ZodString;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            type: zod.ZodLiteral<"text">;
            text: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            type: zod.ZodLiteral<"text">;
            text: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
            type: zod.ZodLiteral<"image">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            type: zod.ZodLiteral<"image">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            type: zod.ZodLiteral<"image">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">>, zod.ZodObject<{
            type: zod.ZodLiteral<"audio">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            type: zod.ZodLiteral<"audio">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            type: zod.ZodLiteral<"audio">;
            data: zod.ZodString;
            mimeType: zod.ZodString;
        }, zod.ZodTypeAny, "passthrough">>]>;
    }>, zod.ZodTypeAny, "passthrough">>;
    listRoots(params?: ListRootsRequest["params"], options?: RequestOptions): Promise<zod.objectOutputType<zod.objectUtil.extendShape<{
        _meta: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
    }, {
        roots: zod.ZodArray<zod.ZodObject<{
            uri: zod.ZodString;
            name: zod.ZodOptional<zod.ZodString>;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            uri: zod.ZodString;
            name: zod.ZodOptional<zod.ZodString>;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            uri: zod.ZodString;
            name: zod.ZodOptional<zod.ZodString>;
        }, zod.ZodTypeAny, "passthrough">>, "many">;
    }>, zod.ZodTypeAny, "passthrough">>;
    sendLoggingMessage(params: LoggingMessageNotification["params"]): Promise<void>;
    sendResourceUpdated(params: ResourceUpdatedNotification["params"]): Promise<void>;
    sendResourceListChanged(): Promise<void>;
    sendToolListChanged(): Promise<void>;
    sendPromptListChanged(): Promise<void>;
}

type Variables = Record<string, string | string[]>;
declare class UriTemplate {
    /**
     * Returns true if the given string contains any URI template expressions.
     * A template expression is a sequence of characters enclosed in curly braces,
     * like {foo} or {?bar}.
     */
    static isTemplate(str: string): boolean;
    private static validateLength;
    private readonly template;
    private readonly parts;
    get variableNames(): string[];
    constructor(template: string);
    toString(): string;
    private parse;
    private getOperator;
    private getNames;
    private encodeValue;
    private expandPart;
    expand(variables: Variables): string;
    private escapeRegExp;
    private partToRegExp;
    match(uri: string): Variables | null;
}

/**
 * High-level MCP server that provides a simpler API for working with resources, tools, and prompts.
 * For advanced usage (like sending notifications or setting custom request handlers), use the underlying
 * Server instance available via the `server` property.
 */
declare class McpServer {
    /**
     * The underlying Server instance, useful for advanced operations like sending notifications.
     */
    readonly server: Server;
    private _registeredResources;
    private _registeredResourceTemplates;
    private _registeredTools;
    private _registeredPrompts;
    constructor(serverInfo: Implementation, options?: ServerOptions);
    /**
     * Attaches to the given transport, starts it, and starts listening for messages.
     *
     * The `server` object assumes ownership of the Transport, replacing any callbacks that have already been set, and expects that it is the only user of the Transport instance going forward.
     */
    connect(transport: Transport): Promise<void>;
    /**
     * Closes the connection.
     */
    close(): Promise<void>;
    private _toolHandlersInitialized;
    private setToolRequestHandlers;
    private _completionHandlerInitialized;
    private setCompletionRequestHandler;
    private handlePromptCompletion;
    private handleResourceCompletion;
    private _resourceHandlersInitialized;
    private setResourceRequestHandlers;
    private _promptHandlersInitialized;
    private setPromptRequestHandlers;
    /**
     * Registers a resource `name` at a fixed URI, which will use the given callback to respond to read requests.
     */
    resource(name: string, uri: string, readCallback: ReadResourceCallback): RegisteredResource;
    /**
     * Registers a resource `name` at a fixed URI with metadata, which will use the given callback to respond to read requests.
     */
    resource(name: string, uri: string, metadata: ResourceMetadata, readCallback: ReadResourceCallback): RegisteredResource;
    /**
     * Registers a resource `name` with a template pattern, which will use the given callback to respond to read requests.
     */
    resource(name: string, template: ResourceTemplate, readCallback: ReadResourceTemplateCallback): RegisteredResourceTemplate;
    /**
     * Registers a resource `name` with a template pattern and metadata, which will use the given callback to respond to read requests.
     */
    resource(name: string, template: ResourceTemplate, metadata: ResourceMetadata, readCallback: ReadResourceTemplateCallback): RegisteredResourceTemplate;
    private _createRegisteredTool;
    /**
     * Registers a zero-argument tool `name`, which will run the given function when the client calls it.
     */
    tool(name: string, cb: ToolCallback): RegisteredTool;
    /**
     * Registers a zero-argument tool `name` (with a description) which will run the given function when the client calls it.
     */
    tool(name: string, description: string, cb: ToolCallback): RegisteredTool;
    /**
     * Registers a tool taking either a parameter schema for validation or annotations for additional metadata.
     * This unified overload handles both `tool(name, paramsSchema, cb)` and `tool(name, annotations, cb)` cases.
     *
     * Note: We use a union type for the second parameter because TypeScript cannot reliably disambiguate
     * between ToolAnnotations and ZodRawShape during overload resolution, as both are plain object types.
     */
    tool<Args extends ZodRawShape>(name: string, paramsSchemaOrAnnotations: Args | ToolAnnotations, cb: ToolCallback<Args>): RegisteredTool;
    /**
     * Registers a tool `name` (with a description) taking either parameter schema or annotations.
     * This unified overload handles both `tool(name, description, paramsSchema, cb)` and
     * `tool(name, description, annotations, cb)` cases.
     *
     * Note: We use a union type for the third parameter because TypeScript cannot reliably disambiguate
     * between ToolAnnotations and ZodRawShape during overload resolution, as both are plain object types.
     */
    tool<Args extends ZodRawShape>(name: string, description: string, paramsSchemaOrAnnotations: Args | ToolAnnotations, cb: ToolCallback<Args>): RegisteredTool;
    /**
     * Registers a tool with both parameter schema and annotations.
     */
    tool<Args extends ZodRawShape>(name: string, paramsSchema: Args, annotations: ToolAnnotations, cb: ToolCallback<Args>): RegisteredTool;
    /**
     * Registers a tool with description, parameter schema, and annotations.
     */
    tool<Args extends ZodRawShape>(name: string, description: string, paramsSchema: Args, annotations: ToolAnnotations, cb: ToolCallback<Args>): RegisteredTool;
    /**
     * Registers a tool with a config object and callback.
     */
    registerTool<InputArgs extends ZodRawShape, OutputArgs extends ZodRawShape>(name: string, config: {
        description?: string;
        inputSchema?: InputArgs;
        outputSchema?: OutputArgs;
        annotations?: ToolAnnotations;
    }, cb: ToolCallback<InputArgs>): RegisteredTool;
    /**
     * Registers a zero-argument prompt `name`, which will run the given function when the client calls it.
     */
    prompt(name: string, cb: PromptCallback): RegisteredPrompt;
    /**
     * Registers a zero-argument prompt `name` (with a description) which will run the given function when the client calls it.
     */
    prompt(name: string, description: string, cb: PromptCallback): RegisteredPrompt;
    /**
     * Registers a prompt `name` accepting the given arguments, which must be an object containing named properties associated with Zod schemas. When the client calls it, the function will be run with the parsed and validated arguments.
     */
    prompt<Args extends PromptArgsRawShape>(name: string, argsSchema: Args, cb: PromptCallback<Args>): RegisteredPrompt;
    /**
     * Registers a prompt `name` (with a description) accepting the given arguments, which must be an object containing named properties associated with Zod schemas. When the client calls it, the function will be run with the parsed and validated arguments.
     */
    prompt<Args extends PromptArgsRawShape>(name: string, description: string, argsSchema: Args, cb: PromptCallback<Args>): RegisteredPrompt;
    /**
     * Checks if the server is connected to a transport.
     * @returns True if the server is connected
     */
    isConnected(): boolean;
    /**
     * Sends a resource list changed event to the client, if connected.
     */
    sendResourceListChanged(): void;
    /**
     * Sends a tool list changed event to the client, if connected.
     */
    sendToolListChanged(): void;
    /**
     * Sends a prompt list changed event to the client, if connected.
     */
    sendPromptListChanged(): void;
}
/**
 * A callback to complete one variable within a resource template's URI template.
 */
type CompleteResourceTemplateCallback = (value: string) => string[] | Promise<string[]>;
/**
 * A resource template combines a URI pattern with optional functionality to enumerate
 * all resources matching that pattern.
 */
declare class ResourceTemplate {
    private _callbacks;
    private _uriTemplate;
    constructor(uriTemplate: string | UriTemplate, _callbacks: {
        /**
         * A callback to list all resources matching this template. This is required to specified, even if `undefined`, to avoid accidentally forgetting resource listing.
         */
        list: ListResourcesCallback | undefined;
        /**
         * An optional callback to autocomplete variables within the URI template. Useful for clients and users to discover possible values.
         */
        complete?: {
            [variable: string]: CompleteResourceTemplateCallback;
        };
    });
    /**
     * Gets the URI template pattern.
     */
    get uriTemplate(): UriTemplate;
    /**
     * Gets the list callback, if one was provided.
     */
    get listCallback(): ListResourcesCallback | undefined;
    /**
     * Gets the callback for completing a specific URI template variable, if one was provided.
     */
    completeCallback(variable: string): CompleteResourceTemplateCallback | undefined;
}
/**
 * Callback for a tool handler registered with Server.tool().
 *
 * Parameters will include tool arguments, if applicable, as well as other request handler context.
 *
 * The callback should return:
 * - `structuredContent` if the tool has an outputSchema defined
 * - `content` if the tool does not have an outputSchema
 * - Both fields are optional but typically one should be provided
 */
type ToolCallback<Args extends undefined | ZodRawShape = undefined> = Args extends ZodRawShape ? (args: z.objectOutputType<Args, ZodTypeAny>, extra: RequestHandlerExtra<ServerRequest, ServerNotification>) => CallToolResult | Promise<CallToolResult> : (extra: RequestHandlerExtra<ServerRequest, ServerNotification>) => CallToolResult | Promise<CallToolResult>;
type RegisteredTool = {
    description?: string;
    inputSchema?: AnyZodObject;
    outputSchema?: AnyZodObject;
    annotations?: ToolAnnotations;
    callback: ToolCallback<undefined | ZodRawShape>;
    enabled: boolean;
    enable(): void;
    disable(): void;
    update<InputArgs extends ZodRawShape, OutputArgs extends ZodRawShape>(updates: {
        name?: string | null;
        description?: string;
        paramsSchema?: InputArgs;
        outputSchema?: OutputArgs;
        annotations?: ToolAnnotations;
        callback?: ToolCallback<InputArgs>;
        enabled?: boolean;
    }): void;
    remove(): void;
};
/**
 * Additional, optional information for annotating a resource.
 */
type ResourceMetadata = Omit<Resource, "uri" | "name">;
/**
 * Callback to list all resources matching a given template.
 */
type ListResourcesCallback = (extra: RequestHandlerExtra<ServerRequest, ServerNotification>) => ListResourcesResult | Promise<ListResourcesResult>;
/**
 * Callback to read a resource at a given URI.
 */
type ReadResourceCallback = (uri: URL, extra: RequestHandlerExtra<ServerRequest, ServerNotification>) => ReadResourceResult | Promise<ReadResourceResult>;
type RegisteredResource = {
    name: string;
    metadata?: ResourceMetadata;
    readCallback: ReadResourceCallback;
    enabled: boolean;
    enable(): void;
    disable(): void;
    update(updates: {
        name?: string;
        uri?: string | null;
        metadata?: ResourceMetadata;
        callback?: ReadResourceCallback;
        enabled?: boolean;
    }): void;
    remove(): void;
};
/**
 * Callback to read a resource at a given URI, following a filled-in URI template.
 */
type ReadResourceTemplateCallback = (uri: URL, variables: Variables, extra: RequestHandlerExtra<ServerRequest, ServerNotification>) => ReadResourceResult | Promise<ReadResourceResult>;
type RegisteredResourceTemplate = {
    resourceTemplate: ResourceTemplate;
    metadata?: ResourceMetadata;
    readCallback: ReadResourceTemplateCallback;
    enabled: boolean;
    enable(): void;
    disable(): void;
    update(updates: {
        name?: string | null;
        template?: ResourceTemplate;
        metadata?: ResourceMetadata;
        callback?: ReadResourceTemplateCallback;
        enabled?: boolean;
    }): void;
    remove(): void;
};
type PromptArgsRawShape = {
    [k: string]: ZodType<string, ZodTypeDef, string> | ZodOptional<ZodType<string, ZodTypeDef, string>>;
};
type PromptCallback<Args extends undefined | PromptArgsRawShape = undefined> = Args extends PromptArgsRawShape ? (args: z.objectOutputType<Args, ZodTypeAny>, extra: RequestHandlerExtra<ServerRequest, ServerNotification>) => GetPromptResult | Promise<GetPromptResult> : (extra: RequestHandlerExtra<ServerRequest, ServerNotification>) => GetPromptResult | Promise<GetPromptResult>;
type RegisteredPrompt = {
    description?: string;
    argsSchema?: ZodObject<PromptArgsRawShape>;
    callback: PromptCallback<undefined | PromptArgsRawShape>;
    enabled: boolean;
    enable(): void;
    disable(): void;
    update<Args extends PromptArgsRawShape>(updates: {
        name?: string | null;
        description?: string;
        argsSchema?: Args;
        callback?: PromptCallback<Args>;
        enabled?: boolean;
    }): void;
    remove(): void;
};

/**
 * Creates and configures a Gestell MCP server with all available tools registered.
 *
 * @param key - Your Gestell API key. Defaults to the `GESTELL_API_KEY` environment variable.
 * @returns A fully initialized `McpServer` instance with search, prompt, collection,
 *          document, and extraction tools loaded.
 */
declare function buildMcpServer(key?: string): McpServer;

/**
 * Configuration options for a Gestell terminal-based MCP client.
 */
interface GestellTerminalConfig {
    /**
     * Gestell API key used for authentication.
     * Defaults to the `GESTELL_API_KEY` environment variable if omitted.
     */
    apiKey?: string;
}
/**
 * Configuration options for a Gestell remote MCP HTTP server.
 * Extends the terminal config with network and auth settings.
 */
interface GestellRemoteConfig extends GestellTerminalConfig {
    /**
     * Port number on which the HTTP server listens.
     * Defaults to the `PORT` environment variable if omitted.
     */
    port?: number;
    /**
     * Hostname or IP address for the HTTP server to bind to.
     * Defaults to the `HOST` environment variable if omitted.
     */
    host?: string;
    /**
     * Token required in the `Authorization` header.
     * If provided, incoming requests must include this exact value or will receive 401.
     */
    auth?: string;
}

/**
 * Starts the Gestell MCP HTTP server, exposing an endpoint for remote MCP tool calls.
 *
 * @param config - Configuration options for the remote server.
 * @param config.apiKey - Your Gestell API key (defaults to `API_KEY` from env).
 * @param config.host   - Hostname or IP to bind the server to (defaults to `HOST` from env).
 * @param config.port   - Port number to listen on (defaults to `PORT` from env).
 * @param config.auth   - Optional bearer token required in the `Authorization` header.
 *                        If set, requests without a matching header will receive 401.
 * @returns A promise that resolves once the server is listening.
 */
declare function startRemoteServer(config?: GestellRemoteConfig): Promise<void>;

/**
 * Server transport for stdio: this communicates with a MCP client by reading from the current process' stdin and writing to stdout.
 *
 * This transport is only available in Node.js environments.
 */
declare class StdioServerTransport implements Transport {
    private _stdin;
    private _stdout;
    private _readBuffer;
    private _started;
    constructor(_stdin?: Readable, _stdout?: Writable);
    onclose?: () => void;
    onerror?: (error: Error) => void;
    onmessage?: (message: JSONRPCMessage) => void;
    _ondata: (chunk: Buffer) => void;
    _onerror: (error: Error) => void;
    /**
     * Starts listening for messages on stdin.
     */
    start(): Promise<void>;
    private processReadBuffer;
    close(): Promise<void>;
    send(message: JSONRPCMessage): Promise<void>;
}

/**
 * Starts a local MCP server session using stdio transport.
 *
 * @param config - Configuration options for the terminal session.
 * @param config.apiKey - Your Gestell API key. Defaults to the `API_KEY` environment variable.
 * @returns A promise that resolves to an object containing:
 *   - `server`: An initialized and connected `McpServer` instance.
 *   - `transport`: A `StdioServerTransport` instance wired to the server.
 */
declare function startTerminalSession(config?: GestellTerminalConfig): Promise<{
    server: McpServer;
    transport: StdioServerTransport;
}>;

/**
 * Type used to display every supported PII/PHI label in {@link PII_IDENTIFIER_OPTIONS}.
 */
type PiiIdentifierOption = /** Full individual name, e.g., "John Doe". */ 'Name' | /** Location-related data such as addresses or coordinates. */ 'Geographic Data' | /** Dates including birth, death, admission, discharge, etc. */ 'Dates' | /** Telephone numbers, mobile or landline. */ 'Phone Number' | /** Fax numbers for document transmission. */ 'Fax Number' | /** Email addresses used for personal or professional contact. */ 'Email Address' | /** Government-issued Social Security Number. */ 'Social Security Number' | /** Unique medical record identifier assigned by healthcare providers. */ 'Medical Record Number' | /** Identifier for health plan beneficiaries. */ 'Health Plan Beneficiary Number' | /** Financial account numbers like bank or credit accounts. */ 'Account Number' | /** Licenses or certificates, e.g., driver's license, professional license. */ 'Certificate/License Number' | /** Vehicle identification number or related vehicle data. */ 'Vehicle Identifier' | /** Devices or equipment identifiers, e.g., serial numbers. */ 'Device Identifier' | /** Web addresses and URLs. */ 'Web URL' | /** Internet Protocol addresses, e.g., IPv4 or IPv6. */ 'IP Address' | /** Biometric data like fingerprints, retinal scans, voiceprints. */ 'Biometric Identifier' | /** Photograph capturing a person's full face. */ 'Full-face Photograph' | /** System-generated unique codes for identifying entities. */ 'Unique Identifier Code';

/**
 * Core Collection schema: defines essential metadata for a collection, including a human-readable name, classification type, optional tags, detailed description, and high-level instructions for data ingestion, graph construction, prompt formatting, and search key prioritization.
 */
declare const CollectionCoreSchema: {
    /**
     * A concise, human-readable name for the collection.
     * • Recommended max length: 50 characters
     * • Use Title Case and avoid special characters
     * • Example: “Sales Reports Q2 2025”
     */
    name: z.ZodString;
    /**
     * Indicates if this collection contains Personally Identifiable Information (PII).
     * When true, enables additional privacy controls and auditing.
     */
    pii: z.ZodDefault<z.ZodBoolean>;
    /**
     * Array of PII controls for this collection.
     * These identifiers specify what types of PII to look for and handle.
     */
    piiControls: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodEnum<[PiiIdentifierOption, ...PiiIdentifierOption[]]>, "many">>>;
    /**
     * Specifies the classification of this collection.
     * - frame: When you only want the OCR outputs
     * - searchable-frame: Lighter version of canonized collections for search-based reasoning
     * - canon: Complete canonized collection with best search-based reasoning capabilities
     * - features: Specialized collection for category extractions of content
     */
    type: z.ZodDefault<z.ZodEnum<["frame", "searchable-frame", "canon", "features"]>>;
    /**
     * Optional tags to categorize the collection.
     * • Use short, single-word labels (no spaces)
     * • Example: [ "finance", "Q2", "internal" ]
     */
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /**
     * A detailed description of the collection’s purpose and contents.
     * • Multi-sentence narrative, outlining scope and intended use
     * • Example: “Contains all client invoices from January to March 2025, used for quarterly auditing and trend analysis.”
     */
    description: z.ZodOptional<z.ZodString>;
    /**
     * High-level instructions for indexing or ingesting data.
     * • Outline source types, preprocessing steps, and field mappings
     * • Provide any contextual guidelines or constraints
     * • Aim for clear, numbered steps or bullet points
     */
    instructions: z.ZodOptional<z.ZodString>;
    /**
     * Directions for building the graph structure.
     * • Specify node types, edge semantics, and any heuristics
     * • Include rules for relationship extraction
     * • Example: “Link invoices to client nodes by matching client_id field…”
     */
    graphInstructions: z.ZodOptional<z.ZodString>;
    /**
     * Guidance for how the model should format and tone its responses.
     * • Specify desired style (formal, friendly, bullet points, etc.)
     * • Recommend structure (summary, examples, code snippets)
     * • Example: “Respond in bullet points, providing a brief summary followed by detailed steps.”
     */
    promptInstructions: z.ZodOptional<z.ZodString>;
    /**
     * A bullet-point list of search keys to prioritize.
     * • One key per line (≤5 keys)
     * • Example:
     *     - title
     *     - author
     *     - publication_date
     */
    searchInstructions: z.ZodOptional<z.ZodString>;
};
/**
 * Defines the payload for creating a new collection, including the owning organization’s UUID, optional sub-indexing categories (each with name, type, and extraction instructions), and all core collection metadata fields (name, type, tags, description, and ingestion/search/graph/prompt guidelines).
 */
declare const CollectionCreateSchema: {
    /**
     * A concise, human-readable name for the collection.
     * • Recommended max length: 50 characters
     * • Use Title Case and avoid special characters
     * • Example: “Sales Reports Q2 2025”
     */
    name: z.ZodString;
    /**
     * Indicates if this collection contains Personally Identifiable Information (PII).
     * When true, enables additional privacy controls and auditing.
     */
    pii: z.ZodDefault<z.ZodBoolean>;
    /**
     * Array of PII controls for this collection.
     * These identifiers specify what types of PII to look for and handle.
     */
    piiControls: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodEnum<[PiiIdentifierOption, ...PiiIdentifierOption[]]>, "many">>>;
    /**
     * Specifies the classification of this collection.
     * - frame: When you only want the OCR outputs
     * - searchable-frame: Lighter version of canonized collections for search-based reasoning
     * - canon: Complete canonized collection with best search-based reasoning capabilities
     * - features: Specialized collection for category extractions of content
     */
    type: z.ZodDefault<z.ZodEnum<["frame", "searchable-frame", "canon", "features"]>>;
    /**
     * Optional tags to categorize the collection.
     * • Use short, single-word labels (no spaces)
     * • Example: [ "finance", "Q2", "internal" ]
     */
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /**
     * A detailed description of the collection’s purpose and contents.
     * • Multi-sentence narrative, outlining scope and intended use
     * • Example: “Contains all client invoices from January to March 2025, used for quarterly auditing and trend analysis.”
     */
    description: z.ZodOptional<z.ZodString>;
    /**
     * High-level instructions for indexing or ingesting data.
     * • Outline source types, preprocessing steps, and field mappings
     * • Provide any contextual guidelines or constraints
     * • Aim for clear, numbered steps or bullet points
     */
    instructions: z.ZodOptional<z.ZodString>;
    /**
     * Directions for building the graph structure.
     * • Specify node types, edge semantics, and any heuristics
     * • Include rules for relationship extraction
     * • Example: “Link invoices to client nodes by matching client_id field…”
     */
    graphInstructions: z.ZodOptional<z.ZodString>;
    /**
     * Guidance for how the model should format and tone its responses.
     * • Specify desired style (formal, friendly, bullet points, etc.)
     * • Recommend structure (summary, examples, code snippets)
     * • Example: “Respond in bullet points, providing a brief summary followed by detailed steps.”
     */
    promptInstructions: z.ZodOptional<z.ZodString>;
    /**
     * A bullet-point list of search keys to prioritize.
     * • One key per line (≤5 keys)
     * • Example:
     *     - title
     *     - author
     *     - publication_date
     */
    searchInstructions: z.ZodOptional<z.ZodString>;
    /**
     * The UUID of the organization that will own this collection.
     * Example: “3fa85f64-5717-4562-b3fc-2c963f66afa6”
     */
    organizationId: z.ZodString;
    /**
     * Optional, fine-grained categories for breaking your data into sub-groups.
     * • Leave empty ([]) unless you need to index by specific facets
     * • Each category should have:
     *     – name: human-readable label (e.g. “Customer Profiles”)
     *     – type: one of
     *         • concepts — high-level topics or tags
     *         • features — numeric vectors for ML embedding stores
     *         • content — chunks of text or documents
     *         • table — tabular data structures
     *     – instructions: how to extract or interpret items in this category
     * Example:
     * ```jsonc
     * [
     *   {
     *     "name": "Invoices",
     *     "type": "content",
     *     "instructions": "Index each invoice PDF as a separate document, extracting header fields and line items."
     *   }
     * ]
     * ```
     */
    categories: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodObject<{
        /** Category name (e.g. “Invoices”, “Products”, “UserActions”) */
        name: z.ZodString;
        /**
         * Category type, defining how data in this category is treated.
         * • concepts — for high level conceptual sumamries
         * • features — for retrieving and extracting labels
         * • content — for categorizing raw text in existing nodes
         * • table — for structured, row/column data
         */
        type: z.ZodEnum<["concepts", "features", "content", "table"]>;
        /**
         * Detailed extraction or indexing instructions for this category.
         * Describe parsing steps, field mappings, or any preprocessing rules.
         * Example: “Split each invoice into header and line-item records, map invoice_date to ISO format.”
         */
        instructions: z.ZodString;
        /**
         * If true, this category will only create one entry per document.
         */
        singleEntry: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type: "content" | "features" | "concepts" | "table";
        instructions: string;
        singleEntry: boolean;
    }, {
        name: string;
        type: "content" | "features" | "concepts" | "table";
        instructions: string;
        singleEntry?: boolean | undefined;
    }>, "many">>>;
};
/**
 * Payload schema for updating an existing collection, including the collection’s UUID, optional new owner organization UUID, and any core collection metadata fields (name, type, tags, description, and instructions) to modify.
 */
declare const CollectionUpdateSchema: {
    /**
     * A concise, human-readable name for the collection.
     * • Recommended max length: 50 characters
     * • Use Title Case and avoid special characters
     * • Example: “Sales Reports Q2 2025”
     */
    name: z.ZodString;
    /**
     * Indicates if this collection contains Personally Identifiable Information (PII).
     * When true, enables additional privacy controls and auditing.
     */
    pii: z.ZodDefault<z.ZodBoolean>;
    /**
     * Array of PII controls for this collection.
     * These identifiers specify what types of PII to look for and handle.
     */
    piiControls: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodEnum<[PiiIdentifierOption, ...PiiIdentifierOption[]]>, "many">>>;
    /**
     * Specifies the classification of this collection.
     * - frame: When you only want the OCR outputs
     * - searchable-frame: Lighter version of canonized collections for search-based reasoning
     * - canon: Complete canonized collection with best search-based reasoning capabilities
     * - features: Specialized collection for category extractions of content
     */
    type: z.ZodDefault<z.ZodEnum<["frame", "searchable-frame", "canon", "features"]>>;
    /**
     * Optional tags to categorize the collection.
     * • Use short, single-word labels (no spaces)
     * • Example: [ "finance", "Q2", "internal" ]
     */
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    /**
     * A detailed description of the collection’s purpose and contents.
     * • Multi-sentence narrative, outlining scope and intended use
     * • Example: “Contains all client invoices from January to March 2025, used for quarterly auditing and trend analysis.”
     */
    description: z.ZodOptional<z.ZodString>;
    /**
     * High-level instructions for indexing or ingesting data.
     * • Outline source types, preprocessing steps, and field mappings
     * • Provide any contextual guidelines or constraints
     * • Aim for clear, numbered steps or bullet points
     */
    instructions: z.ZodOptional<z.ZodString>;
    /**
     * Directions for building the graph structure.
     * • Specify node types, edge semantics, and any heuristics
     * • Include rules for relationship extraction
     * • Example: “Link invoices to client nodes by matching client_id field…”
     */
    graphInstructions: z.ZodOptional<z.ZodString>;
    /**
     * Guidance for how the model should format and tone its responses.
     * • Specify desired style (formal, friendly, bullet points, etc.)
     * • Recommend structure (summary, examples, code snippets)
     * • Example: “Respond in bullet points, providing a brief summary followed by detailed steps.”
     */
    promptInstructions: z.ZodOptional<z.ZodString>;
    /**
     * A bullet-point list of search keys to prioritize.
     * • One key per line (≤5 keys)
     * • Example:
     *     - title
     *     - author
     *     - publication_date
     */
    searchInstructions: z.ZodOptional<z.ZodString>;
    /**
     * The UUID of the collection to update.
     * Example: “3fa85f64-5717-4562-b3fc-2c963f66afa6”
     */
    collectionId: z.ZodString;
    /**
     * Optional new owner organization UUID.
     * You must have admin rights in both organizations to transfer ownership.
     * Example: “d2719e84-89b0-4c25-a6f2-1a2bef3c9dbe”
     */
    organizationId: z.ZodOptional<z.ZodString>;
};
/**
 * Request schema for retrieving a collection by its UUID.
 */
declare const GetCollectionRequestSchema: {
    /**
     * The UUID of the collection to update.
     * Example: “3fa85f64-5717-4562-b3fc-2c963f66afa6”
     */
    collectionId: z.ZodString;
};
/**
 * Request schema for listing collections with optional search filter, pagination controls (take, skip), and an extended metadata flag.
 */
declare const GetCollectionsRequestSchema: {
    /**
     * Optional filter string to match against collection name, description, or tags.
     * Example: "finance Q2" will return collections whose name, description, or tags contain those terms.
     */
    search: z.ZodOptional<z.ZodString>;
    /**
     * Optional limit on the number of collections to retrieve.
     * Use for pagination sizing. Example: 5
     */
    take: z.ZodOptional<z.ZodNumber>;
    /**
     * Optional offset for pagination.
     * Skip this many collections before starting to collect the result set.
     * Example: to fetch page 2 with page size 10, set skip = 10.
     */
    skip: z.ZodOptional<z.ZodNumber>;
    /**
     * When true, include extended metadata (documents in collection etc.)
     * If false or omitted, only basic metadata (id, name, type) is returned.
     */
    extended: z.ZodOptional<z.ZodBoolean>;
};

/**
 * Core document schema: defines the UUID of the collection for document-related operations.
 */
declare const DocumentCoreSchema: {
    /** The UUID of the collection associated with the document operation. */
    collectionId: z.ZodString;
};
/**
 * Request schema for uploading a document, including the target collection UUID, document name, optional MIME type, file path, processing instructions, dispatch job flag, and table-processing flag.
 */
declare const UploadDocumentRequestSchema: {
    /** The name of the document. Must not be empty. Is is required to end with a valid file extension (e.g., ".pdf"). */
    name: z.ZodString;
    /** Optional MIME type of the document (e.g., 'application/pdf'). */
    type: z.ZodOptional<z.ZodString>;
    /** The path to the file to upload. Must be a non-empty string representing a valid file path. This should be the path to the file on the local machine. */
    file: z.ZodString;
    /** Optional additional instructions for processing the document. Only provide this if you need specialized instructions for Vision or Audio processing. 99% of the time this should be an empty string. */
    instructions: z.ZodOptional<z.ZodString>;
    /** Whether to dispatch a processing job. Defaults to true. Set to false to skip. */
    job: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    /** Flag to perform additional table processing and analysis on the document. Only use this on financial documents or forms that have complex table data. */
    tables: z.ZodBoolean;
    /** The UUID of the collection associated with the document operation. */
    collectionId: z.ZodString;
};
/**
 * Request schema for updating a document: includes collection and document UUIDs, optional new name and instructions, a reprocessing job flag, and a table-analysis flag.
 */
declare const UpdateDocumentRequestSchema: {
    /** The UUID of the document to update. */
    documentId: z.ZodString;
    /** The updated name of the document. If provided, must not be empty. Is is required to end with a valid file extension (e.g., ".pdf"). */
    name: z.ZodOptional<z.ZodString>;
    /** Updated instructions related to the document. If provided, must not be empty. */
    instructions: z.ZodOptional<z.ZodString>;
    /** Whether to dispatch a reprocessing job. Defaults to false. Set to true to dispatch a reprocessing job. */
    job: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    /** Flag to perform additional table processing and analysis on the document. */
    tables: z.ZodOptional<z.ZodBoolean>;
    /** The UUID of the collection associated with the document operation. */
    collectionId: z.ZodString;
};
/**
 * Request schema for deleting a document: includes the collection UUID and the document UUID to remove.
 */
declare const DeleteDocumentRequestSchema: {
    /** The UUID of the document to delete. */
    documentId: z.ZodString;
    /** The UUID of the collection associated with the document operation. */
    collectionId: z.ZodString;
};
/**
 * Request schema for reprocessing documents: includes the collection UUID, list of document UUIDs to reprocess, and the reprocessing job type.
 */
declare const ReprocessDocumentsRequestSchema: {
    /** An array of UUIDs of the documents to reprocess. */
    ids: z.ZodArray<z.ZodString, "many">;
    /** The type of job to dispatch reprocessing for. Default to "status" to do a full reprocessing job. */
    type: z.ZodEnum<["status", "nodes", "vectors", "edges", "category"]>;
    /** The UUID of the collection associated with the document operation. */
    collectionId: z.ZodString;
};
/**
 * Request schema for exporting a document: includes the collection UUID, document UUID, and desired output format ("json" or "text").
 */
declare const ExportDocumentRequestSchema: {
    /** The UUID of the document to retrieve. */
    documentId: z.ZodString;
    /** Output format: "json" for layout or "text" for raw text output. */
    type: z.ZodEnum<["json", "text"]>;
    /** The UUID of the collection associated with the document operation. */
    collectionId: z.ZodString;
};
/**
 * Request schema for retrieving a document: includes the collection UUID and document UUID.
 */
declare const GetDocumentRequestSchema: {
    /** The UUID of the document to retrieve. */
    documentId: z.ZodString;
    /** The UUID of the collection associated with the document operation. */
    collectionId: z.ZodString;
};
/**
 * Enum schema for document job statuses, covering all processing states ("processing", "error", "ready", "cancelled", "unprocessed", "partial", "all").
 */
declare const JobStatusSchema: z.ZodEnum<["processing", "error", "ready", "cancelled", "unprocessed", "partial", "all"]>;
type JobStatusType = z.infer<typeof JobStatusSchema>;
/**
 * Request schema for listing documents: includes collection UUID, optional search filter, pagination (take, skip), extended info flag, and filters for overall and specific job statuses (nodes, edges, vectors, category).
 */
declare const GetDocumentsRequestSchema: {
    /** A search query string to filter documents. */
    search: z.ZodOptional<z.ZodString>;
    /** The number of documents to retrieve. Must be a positive integer. */
    take: z.ZodOptional<z.ZodNumber>;
    /** The number of documents to skip for pagination. Must be a non-negative integer. */
    skip: z.ZodOptional<z.ZodNumber>;
    /** Whether to retrieve extended information for the documents. */
    extended: z.ZodOptional<z.ZodBoolean>;
    /** Filter by the overall job status. */
    status: z.ZodOptional<z.ZodEnum<["processing", "error", "ready", "cancelled", "unprocessed", "partial", "all"]>>;
    /** Filter by the job status for layout nodes. */
    nodes: z.ZodOptional<z.ZodEnum<["processing", "error", "ready", "cancelled", "unprocessed", "partial", "all"]>>;
    /** Filter by the job status for edges. */
    edges: z.ZodOptional<z.ZodEnum<["processing", "error", "ready", "cancelled", "unprocessed", "partial", "all"]>>;
    /** Filter by the job status for vectors. */
    vectors: z.ZodOptional<z.ZodEnum<["processing", "error", "ready", "cancelled", "unprocessed", "partial", "all"]>>;
    /** Filter by the job status for category. */
    category: z.ZodOptional<z.ZodEnum<["processing", "error", "ready", "cancelled", "unprocessed", "partial", "all"]>>;
    /** The UUID of the collection associated with the document operation. */
    collectionId: z.ZodString;
};

/**
 * Core features schema: defines the UUIDs of the collection and feature category for feature-related operations.
 */
declare const FeaturesCoreSchema: {
    /**
     * The ID of the collection to query.
     * Must be a valid UUID.
     */
    collectionId: z.ZodString;
    /**
     * The ID of the category whose features are being requested.
     * Must be a valid UUID.
     */
    categoryId: z.ZodString;
};
/**
 * Request schema for querying features with optional pagination parameters (skip ≥ 0, take ≥ 1).
 */
declare const FeaturesQueryRequestSchema: {
    /**
     * An optional parameter to skip a specified number of results (for pagination).
     * Must be an integer ≥ 0.
     */
    skip: z.ZodOptional<z.ZodNumber>;
    /**
     * An optional parameter to limit the number of results returned (for pagination).
     * Must be an integer ≥ 1.
     */
    take: z.ZodOptional<z.ZodNumber>;
    /**
     * The ID of the collection to query.
     * Must be a valid UUID.
     */
    collectionId: z.ZodString;
    /**
     * The ID of the category whose features are being requested.
     * Must be a valid UUID.
     */
    categoryId: z.ZodString;
};
/**
 * Request schema for exporting features in the specified format ("json" or "csv").
 */
declare const ExportFeaturesRequestSchema: {
    /**
     * The export format.
     * Allowed values: "json" or "csv".
     */
    format: z.ZodEnum<["json", "csv"]>;
    /**
     * The ID of the collection to query.
     * Must be a valid UUID.
     */
    collectionId: z.ZodString;
    /**
     * The ID of the category whose features are being requested.
     * Must be a valid UUID.
     */
    categoryId: z.ZodString;
};
/**
 * Request interface for querying features with optional pagination.
 */
interface FeaturesQueryRequest {
    /** The ID of the collection to query. Must be a valid UUID. */
    collectionId: string;
    /** The ID of the category whose features are being requested. Must be a valid UUID. */
    categoryId: string;
    /**
     * An optional parameter to limit the number of results returned (for pagination).
     * Must be an integer ≥ 1.
     */
    take?: number;
    /**
     * An optional parameter to skip a specified number of results (for pagination).
     * Must be an integer ≥ 0.
     */
    skip?: number;
}

/**
 * Schema for validating get organization requests.
 * Validates that the request contains a valid organization ID.
 */
declare const GetOrganizationRequestSchema: {
    /**
     * The unique identifier of the organization to retrieve.
     * @example "3fa85f64-5717-4562-b3fc-2c963f66afa6"
     */
    organizationId: z.ZodString;
};
/**
 * Schema for validating list organizations requests.
 * Supports filtering by search term and pagination.
 */
declare const GetOrganizationsRequestSchema: {
    /**
     * Optional search term to filter organizations by name
     * @example "acme"
     */
    search: z.ZodOptional<z.ZodString>;
    /**
     * Maximum number of organizations to return (default: 10)
     * @example 10
     */
    take: z.ZodDefault<z.ZodNumber>;
    /**
     * Number of organizations to skip for pagination (default: 0)
     * @example 0
     */
    skip: z.ZodDefault<z.ZodNumber>;
    /**
     * Whether to include extended organization details (default: false)
     * @example false
     */
    extended: z.ZodDefault<z.ZodBoolean>;
};

/**
 * Core search schema for Gestell: defines required and optional parameters for performing a search on a collection,
 * including collectionId (UUID), optional categoryId (UUID), prompt text, search method (fast|normal|precise),
 * search type (keywords|phrase|summary), vectorDepth, nodeDepth, maxQueries, and maxResults.
 */
declare const GestellCoreSearchSchema: {
    /**
     * The ID of the collection to query. This must be a UUID.
     * Required field that identifies the target collection for the search operation.
     */
    collectionId: z.ZodString;
    /**
     * Optional category ID to filter the search results. If provided, it must be a UUID.
     * Used to narrow down the scope of the search within the specified collection.
     */
    categoryId: z.ZodOptional<z.ZodString>;
    /**
     * The prompt or query to execute. This is the primary input driving the search.
     * A string that defines what the user is searching for or asking about.
     */
    prompt: z.ZodString;
    /**
     * The search method to use, balancing accuracy and speed.
     * - 'fast': Prioritizes speed, potentially reducing accuracy.
     * - 'normal': A balanced approach between speed and accuracy (default).
     * - 'precise': Prioritizes accuracy, potentially increasing computation time.
     * Optional, defaults to 'normal' if not specified.
     */
    method: z.ZodDefault<z.ZodOptional<z.ZodEnum<["fast", "normal", "precise"]>>>;
    /**
     * The type of search to perform, determining how content is matched.
     * - 'keywords': Matches individual keywords within the content.
     * - 'phrase': Matches the exact phrase as provided in the prompt (default).
     * - 'summary': Matches based on document summaries or abstracted content.
     * Optional, defaults to 'phrase' if not specified.
     */
    type: z.ZodDefault<z.ZodOptional<z.ZodEnum<["keywords", "phrase", "summary"]>>>;
    /**
     * Optional depth for vector search, controlling how far the vector-graph traversal extends.
     * Must be a positive integer (greater than 0) if provided. Higher values may yield more
     * comprehensive results but increase computational cost.
     */
    vectorDepth: z.ZodOptional<z.ZodNumber>;
    /**
     * Optional depth for node search, controlling how far the knowledge-graph node traversal extends.
     * Must be a positive integer (greater than 0) if provided. Higher values may yield more
     * detailed results but increase computational cost.
     */
    nodeDepth: z.ZodOptional<z.ZodNumber>;
    /**
     * Optional maximum number of concurrent sub-queries to run.
     * Must be a positive integer (greater than 0) if provided. Limits the number of simultaneous
     * queries, affecting resource usage and performance.
     */
    maxQueries: z.ZodOptional<z.ZodNumber>;
    /**
     * Optional maximum number of results to return in the response.
     * Must be a positive integer (greater than 0) if provided. Limits the size of the result set,
     * impacting response payload size and processing time.
     */
    maxResults: z.ZodOptional<z.ZodNumber>;
};
/**
 * Gestell search schema: extends core search parameters with flags to include full content (includeContent)
 * and edge metadata (includeEdges) in the search response payload.
 */
declare const GestellSearchSchema: {
    /**
     * Whether to include the full content in the response payload.
     * Defaults to true, meaning content is included unless explicitly set to false.
     * Set to false to reduce payload size when content is not needed.
     */
    includeContent: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    /**
     * Whether to include edge metadata (relationships) in the response payload.
     * Defaults to false, excluding edges unless explicitly requested.
     * Including edges can significantly increase payload size due to additional relational data.
     */
    includeEdges: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    /**
     * The ID of the collection to query. This must be a UUID.
     * Required field that identifies the target collection for the search operation.
     */
    collectionId: z.ZodString;
    /**
     * Optional category ID to filter the search results. If provided, it must be a UUID.
     * Used to narrow down the scope of the search within the specified collection.
     */
    categoryId: z.ZodOptional<z.ZodString>;
    /**
     * The prompt or query to execute. This is the primary input driving the search.
     * A string that defines what the user is searching for or asking about.
     */
    prompt: z.ZodString;
    /**
     * The search method to use, balancing accuracy and speed.
     * - 'fast': Prioritizes speed, potentially reducing accuracy.
     * - 'normal': A balanced approach between speed and accuracy (default).
     * - 'precise': Prioritizes accuracy, potentially increasing computation time.
     * Optional, defaults to 'normal' if not specified.
     */
    method: z.ZodDefault<z.ZodOptional<z.ZodEnum<["fast", "normal", "precise"]>>>;
    /**
     * The type of search to perform, determining how content is matched.
     * - 'keywords': Matches individual keywords within the content.
     * - 'phrase': Matches the exact phrase as provided in the prompt (default).
     * - 'summary': Matches based on document summaries or abstracted content.
     * Optional, defaults to 'phrase' if not specified.
     */
    type: z.ZodDefault<z.ZodOptional<z.ZodEnum<["keywords", "phrase", "summary"]>>>;
    /**
     * Optional depth for vector search, controlling how far the vector-graph traversal extends.
     * Must be a positive integer (greater than 0) if provided. Higher values may yield more
     * comprehensive results but increase computational cost.
     */
    vectorDepth: z.ZodOptional<z.ZodNumber>;
    /**
     * Optional depth for node search, controlling how far the knowledge-graph node traversal extends.
     * Must be a positive integer (greater than 0) if provided. Higher values may yield more
     * detailed results but increase computational cost.
     */
    nodeDepth: z.ZodOptional<z.ZodNumber>;
    /**
     * Optional maximum number of concurrent sub-queries to run.
     * Must be a positive integer (greater than 0) if provided. Limits the number of simultaneous
     * queries, affecting resource usage and performance.
     */
    maxQueries: z.ZodOptional<z.ZodNumber>;
    /**
     * Optional maximum number of results to return in the response.
     * Must be a positive integer (greater than 0) if provided. Limits the size of the result set,
     * impacting response payload size and processing time.
     */
    maxResults: z.ZodOptional<z.ZodNumber>;
};
/**
 * Gestell prompt schema: extends core search parameters with an optional system template override (template),
 * a chain-of-thought reasoning flag (cot), and an array of chat history messages (messages) for conversational prompt generation.
 */
declare const GestellPromptSchema: {
    /**
     * Optional system template to override the default prompt instructions for the collection.
     * If provided, this string replaces the collection’s predefined template, allowing
     * customization of the prompt structure.
     */
    template: z.ZodOptional<z.ZodString>;
    /**
     * Flag to enable chain-of-thought reasoning in prompt generation.
     * Defaults to true, enabling this feature unless explicitly disabled.
     * Chain-of-thought reasoning enhances the model's ability to break down complex queries.
     */
    cot: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    /**
     * Array of messages providing chat history for context in prompt generation.
     * Each message consists of a role and content. Defaults to an empty array if not provided.
     * Useful for maintaining conversational context or guiding the model’s response.
     */
    messages: z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodObject<{
        /**
         * The role of the message sender.
         * - 'system': Instructions or context from the system.
         * - 'user': Input or queries from the user.
         * - 'model': Responses or outputs from the model.
         */
        role: z.ZodEnum<["system", "user", "model"]>;
        /**
         * The content of the message.
         * A string containing the text of the message, relevant to its role.
         */
        content: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        role: "model" | "user" | "system";
        content: string;
    }, {
        role: "model" | "user" | "system";
        content: string;
    }>, "many">>>;
    /**
     * The ID of the collection to query. This must be a UUID.
     * Required field that identifies the target collection for the search operation.
     */
    collectionId: z.ZodString;
    /**
     * Optional category ID to filter the search results. If provided, it must be a UUID.
     * Used to narrow down the scope of the search within the specified collection.
     */
    categoryId: z.ZodOptional<z.ZodString>;
    /**
     * The prompt or query to execute. This is the primary input driving the search.
     * A string that defines what the user is searching for or asking about.
     */
    prompt: z.ZodString;
    /**
     * The search method to use, balancing accuracy and speed.
     * - 'fast': Prioritizes speed, potentially reducing accuracy.
     * - 'normal': A balanced approach between speed and accuracy (default).
     * - 'precise': Prioritizes accuracy, potentially increasing computation time.
     * Optional, defaults to 'normal' if not specified.
     */
    method: z.ZodDefault<z.ZodOptional<z.ZodEnum<["fast", "normal", "precise"]>>>;
    /**
     * The type of search to perform, determining how content is matched.
     * - 'keywords': Matches individual keywords within the content.
     * - 'phrase': Matches the exact phrase as provided in the prompt (default).
     * - 'summary': Matches based on document summaries or abstracted content.
     * Optional, defaults to 'phrase' if not specified.
     */
    type: z.ZodDefault<z.ZodOptional<z.ZodEnum<["keywords", "phrase", "summary"]>>>;
    /**
     * Optional depth for vector search, controlling how far the vector-graph traversal extends.
     * Must be a positive integer (greater than 0) if provided. Higher values may yield more
     * comprehensive results but increase computational cost.
     */
    vectorDepth: z.ZodOptional<z.ZodNumber>;
    /**
     * Optional depth for node search, controlling how far the knowledge-graph node traversal extends.
     * Must be a positive integer (greater than 0) if provided. Higher values may yield more
     * detailed results but increase computational cost.
     */
    nodeDepth: z.ZodOptional<z.ZodNumber>;
    /**
     * Optional maximum number of concurrent sub-queries to run.
     * Must be a positive integer (greater than 0) if provided. Limits the number of simultaneous
     * queries, affecting resource usage and performance.
     */
    maxQueries: z.ZodOptional<z.ZodNumber>;
    /**
     * Optional maximum number of results to return in the response.
     * Must be a positive integer (greater than 0) if provided. Limits the size of the result set,
     * impacting response payload size and processing time.
     */
    maxResults: z.ZodOptional<z.ZodNumber>;
};

/**
 * Core tables schema: defines the UUIDs of the target collection and category for table-related operations.
 */
declare const TablesCoreSchema: {
    /**
     * The UUID of the collection to query.
     * Must be a 36-character RFC-4122 string.
     */
    collectionId: z.ZodString;
    /**
     * The UUID of the category whose table data is being requested.
     * Must be a 36-character RFC-4122 string.
     */
    categoryId: z.ZodString;
};
/**
 * Tables query schema: extends core tables schema with optional pagination parameters (skip ≥ 0, take ≥ 1).
 */
declare const TablesQueryRequestSchema: {
    /**
     * Number of results to skip (for pagination).
     * Must be an integer ≥ 0 if provided.
     */
    skip: z.ZodOptional<z.ZodNumber>;
    /**
     * Maximum number of results to return (for pagination).
     * Must be an integer ≥ 1 if provided.
     */
    take: z.ZodOptional<z.ZodNumber>;
    /**
     * The prompt to use to filter the table.
     * Must be a non-empty string if provided.
     */
    prompt: z.ZodOptional<z.ZodString>;
    /**
     * The UUID of the collection to query.
     * Must be a 36-character RFC-4122 string.
     */
    collectionId: z.ZodString;
    /**
     * The UUID of the category whose table data is being requested.
     * Must be a 36-character RFC-4122 string.
     */
    categoryId: z.ZodString;
};
/**
 * Export table schema: extends core tables schema with the desired output format ("json" or "csv").
 */
declare const ExportTableRequestSchema: {
    /**
     * Desired export format.
     * Must be either "json" or "csv".
     */
    format: z.ZodEnum<["json", "csv"]>;
    /**
     * The UUID of the collection to query.
     * Must be a 36-character RFC-4122 string.
     */
    collectionId: z.ZodString;
    /**
     * The UUID of the category whose table data is being requested.
     * Must be a 36-character RFC-4122 string.
     */
    categoryId: z.ZodString;
};

/**
 * Represents a single message output from a Gestell tool invocation.
 *
 * @interface GestellToolOutput
 */
interface GestellToolOutput {
    /**
     * The category of the output message (e.g., "text", "error", etc.).
     */
    type: string;
    /**
     * The content of the message returned by the tool.
     */
    text: string;
}

export { CollectionCoreSchema, CollectionCreateSchema, CollectionUpdateSchema, DeleteDocumentRequestSchema, DocumentCoreSchema, ExportDocumentRequestSchema, ExportFeaturesRequestSchema, ExportTableRequestSchema, FeaturesCoreSchema, FeaturesQueryRequestSchema, GestellCoreSearchSchema, GestellPromptSchema, GestellSearchSchema, GetCollectionRequestSchema, GetCollectionsRequestSchema, GetDocumentRequestSchema, GetDocumentsRequestSchema, GetOrganizationRequestSchema, GetOrganizationsRequestSchema, JobStatusSchema, ReprocessDocumentsRequestSchema, TablesCoreSchema, TablesQueryRequestSchema, UpdateDocumentRequestSchema, UploadDocumentRequestSchema, buildMcpServer, runTool, startRemoteServer, startTerminalClient, startTerminalSession };
export type { FeaturesQueryRequest, GestellToolOutput, JobStatusType };
